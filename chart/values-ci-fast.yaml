# Conservative CI values - optimized for reliability over speed
# Focus on service reduction rather than aggressive resource limits

# Use local images (already in values-ci.yaml)
image:
  repository: orchestrator
  tag: "local"
  pullPolicy: Never

personaRuntime:
  enabled: true
  replicas: 1  # Minimal replicas for CI
  image:
    repository: persona-runtime
    tag: "local"
    pullPolicy: Never
  resources:
    requests:
      memory: "128Mi"  # Conservative memory for LLM service
      cpu: "100m"      # More CPU for AI processing
    limits:
      memory: "256Mi"  # Adequate limits
      cpu: "300m"

# Conservative fake-threads config (avoid over-optimization)
fakeThreads:
  enabled: true
  image:
    repository: fake-threads
    tag: "local" 
    pullPolicy: Never
  port: 9009
  replicas: 1
  resources:
    requests:
      memory: "64Mi"   # Reasonable memory
      cpu: "50m"       # Reasonable CPU
    limits:
      memory: "128Mi"  # Conservative limits
      cpu: "200m"
  # Reasonable health checks
  livenessProbe:
    httpGet:
      path: /health
      port: 9009
    initialDelaySeconds: 10   # Give it time to start
    periodSeconds: 20        # Less frequent checks
    timeoutSeconds: 5        # Reasonable timeout
    successThreshold: 1
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /health
      port: 9009
    initialDelaySeconds: 5   # Reasonable startup time
    periodSeconds: 10        # Less frequent checks
    timeoutSeconds: 5        # Reasonable timeout
    successThreshold: 1
    failureThreshold: 3

# Minimal PostgreSQL for CI
postgres:
  enabled: true
  storage: 500Mi  # Minimal storage
  resources:
    requests:
      memory: "64Mi"
      cpu: "25m"
    limits:
      memory: "128Mi"
      cpu: "100m"
  # Fast PostgreSQL startup
  primary:
    configuration: |
      shared_preload_libraries = ''
      max_connections = 20
      shared_buffers = 16MB
      effective_cache_size = 32MB
      maintenance_work_mem = 4MB
      checkpoint_completion_target = 0.9
      wal_buffers = 1MB
      default_statistics_target = 10

# Minimal RabbitMQ
rabbitmq:
  enabled: true
  resources:
    requests:
      memory: "64Mi"
      cpu: "25m"
    limits:
      memory: "128Mi"
      cpu: "100m"

# Enable celery worker with optimized settings for CI
celeryWorker:
  enabled: true
  replicas: 1
  image:
    repository: celery-worker
    tag: "local"
    pullPolicy: Never
  resources:
    requests:
      memory: "128Mi"  # Reasonable for 2 worker processes
      cpu: "50m"       # Minimal CPU for CI
    limits:
      memory: "256Mi"  # Should be enough with concurrency=2
      cpu: "200m"
  # Conservative health checks for CI reliability
  livenessProbe:
    initialDelaySeconds: 15
    periodSeconds: 20
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 15
    timeoutSeconds: 5
    failureThreshold: 3

viralEngine:
  enabled: false

achievementCollector:
  enabled: false

conversationEngine:
  enabled: false

revenue:
  enabled: false

viralMetrics:
  enabled: false

# Minimal Qdrant
qdrant:
  enabled: true
  resources:
    requests:
      memory: "64Mi"
      cpu: "25m"
    limits:
      memory: "128Mi"
      cpu: "100m"

# Skip monitoring entirely
monitoring:
  prometheus:
    enabled: false
  grafana:
    enabled: false
  alertmanager:
    enabled: false

# Global deployment optimizations
global:
  # Fast image pulls
  imagePullPolicy: Never
  # Reduced resource requests across all services
  resources:
    requests:
      memory: "32Mi"
      cpu: "10m"
    limits:
      memory: "128Mi" 
      cpu: "100m"