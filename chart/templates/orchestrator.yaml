# chart/templates/orchestrator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orchestrator
  labels:
{{- include "threads.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: orchestrator
  template:
    metadata:
      labels:
        app: orchestrator
    spec:
      # uncomment if you later add a GHCR pull secret
      # imagePullSecrets:
      # - name: ghcr-creds
      containers:
        - name: orchestrator
          image: "{{ tpl .Values.image.repository $ }}:{{ tpl .Values.image.tag $ }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          env:
            - name: RABBITMQ_URL
              value: {{ .Values.rabbitmq.url }}
            - name: CELERY_BROKER_URL
              value: {{ .Values.rabbitmq.url }}
            - name: THREADS_BASE_URL
              value: "http://{{ .Values.threadsService.name }}:{{ .Values.threadsService.port }}"
            - name: POSTGRES_DSN
              value: "postgresql+psycopg2://postgres:{{ .Values.postgres.auth.postgresPassword }}@postgres:5432/postgres"
            {{- if .Values.redis.enabled }}
            - name: REDIS_URL
              value: "redis://redis:{{ .Values.redis.port | default 6379 }}"
            {{- end }}
            {{- if .Values.orchestrator.commentMonitoring.enabled }}
            - name: COMMENT_MONITORING_ENABLED
              value: "true"
            - name: COMMENT_BATCH_SIZE
              value: {{ .Values.orchestrator.commentMonitoring.batchSize | default "10" | quote }}
            - name: COMMENT_DEDUP_CACHE_TTL
              value: {{ .Values.orchestrator.commentMonitoring.dedupCacheTTL | default "3600" | quote }}
            - name: COMMENT_PROCESSING_TIMEOUT
              value: {{ .Values.orchestrator.commentMonitoring.processingTimeout | default "30" | quote }}
            {{- end }}
          envFrom:
            - secretRef:
                name: openai-secret
          ports:
            - name: http
              containerPort: 8080
            - name: metrics
              containerPort: 9090
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 2
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
{{- with .Values.orchestrator.resources | default .Values.resources }}
          resources:
{{ toYaml . | nindent 12 }}
{{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: orchestrator
spec:
  type: {{ .Values.service.type | default "ClusterIP" }}
  selector:
    app: orchestrator
  ports:
    - name: http
      port: {{ .Values.service.port | default 8080 }}
      targetPort: 8080
    - name: metrics
      port: 9090
      targetPort: 9090

{{- if and .Values.monitoring.prometheus.enabled .Values.orchestrator.serviceMonitor.enabled }}
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: orchestrator
  labels:
    {{- include "threads.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      app: orchestrator
  endpoints:
  - port: metrics
    interval: {{ .Values.orchestrator.serviceMonitor.interval | default "30s" }}
    scrapeTimeout: {{ .Values.orchestrator.serviceMonitor.scrapeTimeout | default "10s" }}
    path: /metrics
    honorLabels: true
{{- end }}

{{- if .Values.orchestrator.autoscaling.enabled }}
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: orchestrator
  labels:
    {{- include "threads.labels" . | nindent 4 }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: orchestrator
  minReplicas: {{ .Values.orchestrator.autoscaling.minReplicas | default 1 }}
  maxReplicas: {{ .Values.orchestrator.autoscaling.maxReplicas | default 5 }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: {{ .Values.orchestrator.autoscaling.targetCPUUtilization | default 70 }}
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: {{ .Values.orchestrator.autoscaling.targetMemoryUtilization | default 80 }}
  {{- if .Values.orchestrator.autoscaling.customMetrics.enabled }}
  - type: Pods
    pods:
      metric:
        name: comment_processing_queue_length
      target:
        type: AverageValue
        averageValue: {{ .Values.orchestrator.autoscaling.customMetrics.targetQueueLength | default "50" | quote }}
  {{- end }}
  behavior:
    scaleUp:
      stabilizationWindowSeconds: {{ .Values.orchestrator.autoscaling.scaleUp.stabilizationWindowSeconds | default 60 }}
      policies:
      - type: Percent
        value: {{ .Values.orchestrator.autoscaling.scaleUp.percentPolicy | default 100 }}
        periodSeconds: {{ .Values.orchestrator.autoscaling.scaleUp.periodSeconds | default 15 }}
    scaleDown:
      stabilizationWindowSeconds: {{ .Values.orchestrator.autoscaling.scaleDown.stabilizationWindowSeconds | default 300 }}
      policies:
      - type: Percent
        value: {{ .Values.orchestrator.autoscaling.scaleDown.percentPolicy | default 50 }}
        periodSeconds: {{ .Values.orchestrator.autoscaling.scaleDown.periodSeconds | default 60 }}
{{- end }}

{{- if .Values.orchestrator.pdb.enabled }}
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: orchestrator
  labels:
    {{- include "threads.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      app: orchestrator
  minAvailable: {{ .Values.orchestrator.pdb.minAvailable | default 1 }}
{{- end }}
