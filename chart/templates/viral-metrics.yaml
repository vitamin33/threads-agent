# chart/templates/viral-metrics.yaml
{{- if .Values.viralMetrics.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: viral-metrics
  labels:
    app: viral-metrics
    version: v1
spec:
  replicas: {{ .Values.viralMetrics.replicas | default 2 }}
  selector:
    matchLabels:
      app: viral-metrics
  template:
    metadata:
      labels:
        app: viral-metrics
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: viral-metrics
          image: "{{ tpl .Values.viralMetrics.image.repository $ }}:{{ tpl .Values.viralMetrics.image.tag $ }}"
          imagePullPolicy: {{ .Values.viralMetrics.image.pullPolicy | default "IfNotPresent" }}
          
          env:
            - name: POSTGRES_DSN
              value: "postgresql://postgres:pass@postgres:5432/threads_agent"
            - name: DATABASE_URL
              value: "postgresql://postgres:pass@postgres:5432/threads_agent"
            - name: REDIS_URL
              value: "redis://redis:6379/0"
            - name: RABBITMQ_URL
              value: {{ .Values.rabbitmq.url }}
            - name: FAKE_THREADS_URL
              value: "http://fake-threads:9009"
            
            # Performance tuning
            - name: BATCH_SIZE
              value: "{{ .Values.viralMetrics.batchSize | default 25 }}"
            - name: MAX_PARALLEL_TASKS  
              value: "{{ .Values.viralMetrics.maxParallelTasks | default 10 }}"
            - name: CACHE_TTL_SECONDS
              value: "{{ .Values.viralMetrics.cacheTtl | default 300 }}"
            
            # Memory optimization
            - name: PYTHONHASHSEED
              value: "0"
            - name: MALLOC_ARENA_MAX
              value: "2"
          
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "1Gi" 
              cpu: "500m"
          
          # Health checks optimized for <60s SLA
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 2
          
          # Performance-optimized startup
          startupProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 2
            timeoutSeconds: 5
            failureThreshold: 30
            
          # Security context
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          
          # Temp storage for processing
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /app/cache
      
      # Performance optimization
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      
      # Node affinity for performance
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - viral-metrics
              topologyKey: kubernetes.io/hostname
      
      volumes:
        - name: tmp
          emptyDir:
            sizeLimit: 100Mi
        - name: cache
          emptyDir:
            sizeLimit: 500Mi

---
apiVersion: v1
kind: Service
metadata:
  name: viral-metrics
  labels:
    app: viral-metrics
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
    - port: 9090
      targetPort: metrics
      protocol: TCP
      name: metrics
  selector:
    app: viral-metrics

---
# Horizontal Pod Autoscaler for dynamic scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: viral-metrics-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: viral-metrics
  minReplicas: {{ .Values.viralMetrics.autoscaling.minReplicas | default 2 }}
  maxReplicas: {{ .Values.viralMetrics.autoscaling.maxReplicas | default 10 }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  # Custom metrics for <60s SLA
  - type: Pods
    pods:
      metric:
        name: viral_metrics_collection_latency_seconds
      target:
        type: AverageValue
        averageValue: "45"  # Scale up if latency > 45s
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
{{- end }}
