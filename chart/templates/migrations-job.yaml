# chart/templates/migrations-job.yaml
{{- if .Values.postgres.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: migrations
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "10"
spec:
  backoffLimit: 3
  activeDeadlineSeconds: 300
  template:
    spec:
      restartPolicy: OnFailure

      # 1️⃣  Wait until the super-user works and create database
      initContainers:
      - name: wait-pg-and-create-db
        image: bitnami/postgresql:16
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: threads-postgresql
              key: POSTGRES_PASSWORD
        command: ["/bin/bash"]
        args:
          - -c
          - |
            set -e
            echo "Setting up PostgreSQL client environment..."
            export PATH="/opt/bitnami/postgresql/bin:$PATH"
            export PGPASSWORD="${POSTGRES_PASSWORD}"
            
            echo "Waiting for PostgreSQL to be ready..."
            MAX_ATTEMPTS=60
            ATTEMPT=0
            
            while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
              if psql -h postgres -U postgres -c "SELECT 1" >/dev/null 2>&1; then
                echo "PostgreSQL is ready!"
                break
              fi
              ATTEMPT=$((ATTEMPT + 1))
              echo "Attempt $ATTEMPT/$MAX_ATTEMPTS - PostgreSQL not ready, waiting 2s..."
              sleep 2
            done
            
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "ERROR: PostgreSQL did not become ready in time"
              exit 1
            fi
            
            # Check and create database
            echo "Checking database existence..."
            if psql -h postgres -U postgres -lqt | cut -d \| -f 1 | grep -qw threads_agent; then
              echo "Database 'threads_agent' already exists"
            else
              echo "Creating database 'threads_agent'..."
              psql -h postgres -U postgres -c "CREATE DATABASE threads_agent;"
              echo "Database created successfully"
            fi
            
            # Verify connection to the new database
            echo "Verifying database connection..."
            psql -h postgres -U postgres -d threads_agent -c "SELECT 1" >/dev/null 2>&1
            echo "Database is ready for migrations!"

      # 2️⃣  Run Alembic migrations
      containers:
      - name: alembic
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        envFrom:                       # lift pw directly into env
          - secretRef: { name: threads-postgresql }
        command:
          - /bin/sh
          - -c
          - |
              # Database is already created by initContainer
              echo "Running migrations on threads_agent database..."
              export POSTGRES_DSN="postgresql+psycopg2://postgres:${POSTGRES_PASSWORD}@postgres:5432/threads_agent"
              alembic -c /app/services/orchestrator/db/alembic.ini upgrade head
{{- end }}
