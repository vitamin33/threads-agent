# chart/templates/migrations-job.yaml
{{- if .Values.postgres.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: migrations
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "10"
spec:
  backoffLimit: 3
  activeDeadlineSeconds: 300
  template:
    spec:
      restartPolicy: OnFailure

      # 1️⃣  Wait until the super-user works and create database
      initContainers:
      - name: wait-for-postgres
        image: postgres:16-alpine
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: threads-postgresql
              key: POSTGRES_PASSWORD
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Waiting for PostgreSQL and database to be ready..."
            until psql -h postgres -U postgres -d threads_agent -c "SELECT 1" >/dev/null 2>&1; do
              echo "Waiting for database threads_agent to be available..."
              sleep 2
            done
            echo "Database threads_agent is ready for migrations!"

      # 2️⃣  Run Alembic migrations
      containers:
      - name: alembic
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        envFrom:                       # lift pw directly into env
          - secretRef: { name: threads-postgresql }
        command:
          - /bin/sh
          - -c
          - |
              # Database is already created by initContainer
              echo "Running migrations on threads_agent database..."
              export POSTGRES_DSN="postgresql+psycopg2://postgres:${POSTGRES_PASSWORD}@postgres:5432/threads_agent"
              alembic -c /app/services/orchestrator/db/alembic.ini upgrade head
{{- end }}
