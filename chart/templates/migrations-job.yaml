# chart/templates/migrations-job.yaml
{{- if .Values.postgres.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: migrations
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "10"
spec:
  template:
    spec:
      restartPolicy: OnFailure

      # 1Ô∏è‚É£  Wait until the super-user works
      initContainers:
      - name: wait-pg
        image: bitnami/postgresql:16
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-postgresql
              key: POSTGRES_PASSWORD
        command: ["sh","-ec",
          "echo '‚è≥ waiting for Postgres super-user ‚Ä¶'; \
           for i in $(seq 1 60); do \
             PGPASSWORD=\"$POSTGRES_PASSWORD\" psql -h postgres -U postgres -c 'select 1' >/dev/null 2>&1 && exit 0; \
             sleep 2; \
           done; \
           echo 'üí• postgres still locked'; exit 1"]

      # 2Ô∏è‚É£  Create database and run Alembic
      containers:
      - name: alembic
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        envFrom:                       # lift pw directly into env
          - secretRef: { name: {{ .Release.Name }}-postgresql }
        command:
          - /bin/sh
          - -c
          - |
              # First, create the threads_agent database if it doesn't exist
              PGPASSWORD="${POSTGRES_PASSWORD}" psql -h postgres -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = 'threads_agent'" | grep -q 1 || \
              PGPASSWORD="${POSTGRES_PASSWORD}" psql -h postgres -U postgres -c "CREATE DATABASE threads_agent;"
              
              # Then run migrations on threads_agent database
              export POSTGRES_DSN="postgresql+psycopg2://postgres:${POSTGRES_PASSWORD}@postgres:5432/threads_agent"
              alembic -c /app/services/orchestrator/db/alembic.ini upgrade head
{{- end }}
