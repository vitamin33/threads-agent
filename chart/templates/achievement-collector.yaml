{{- if .Values.achievementCollector.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: achievement-collector
  labels:
    {{- include "threads.labels" . | nindent 4 }}
    app: achievement-collector
spec:
  replicas: {{ .Values.achievementCollector.replicas | default 1 }}
  selector:
    matchLabels:
      app: achievement-collector
  template:
    metadata:
      labels:
        app: achievement-collector
    spec:
      containers:
      - name: achievement-collector
        image: "{{ .Values.achievementCollector.image.repository }}:{{ .Values.achievementCollector.image.tag }}"
        imagePullPolicy: {{ .Values.achievementCollector.image.pullPolicy }}
        ports:
        - name: http
          containerPort: 8090
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: DATABASE_URL
          value: "postgresql://{{ .Values.postgres.auth.username }}:{{ .Values.postgres.auth.postgresPassword }}@postgres:5432/{{ .Values.postgres.auth.database }}"
        - name: GITHUB_WEBHOOK_SECRET
          value: {{ .Values.achievementCollector.github.webhookSecret | quote }}
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: openai-secret
              key: OPENAI_API_KEY
        - name: PORTFOLIO_OUTPUT_DIR
          value: "/app/portfolios"
        - name: LOG_LEVEL
          value: {{ .Values.achievementCollector.logLevel | default "INFO" | quote }}
        # Phase 2 Integration Environment Variables
        - name: ORCHESTRATOR_URL
          value: "http://orchestrator:8080"
        - name: THREADS_ADAPTOR_URL
          value: "http://threads-adaptor:8000"
        - name: PROMETHEUS_URL
          value: "http://prometheus:9090"
        - name: SCRAPE_INTERVAL_HOURS
          value: {{ .Values.achievementCollector.prometheus.scrapeInterval | default "24" | quote }}
        - name: USE_SQLITE
          value: {{ .Values.achievementCollector.sqlite.enabled | default "false" | quote }}
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          {{- toYaml .Values.achievementCollector.resources | nindent 10 }}
        volumeMounts:
        - name: portfolio-storage
          mountPath: /app/portfolios
      volumes:
      - name: portfolio-storage
        persistentVolumeClaim:
          claimName: achievement-portfolios
---
apiVersion: v1
kind: Service
metadata:
  name: achievement-collector
  labels:
    {{- include "threads.labels" . | nindent 4 }}
    app: achievement-collector
spec:
  type: {{ .Values.achievementCollector.service.type }}
  ports:
  - port: {{ .Values.achievementCollector.service.port }}
    targetPort: http
    protocol: TCP
    name: http
  - port: 9090
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app: achievement-collector
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: achievement-portfolios
  labels:
    {{- include "threads.labels" . | nindent 4 }}
    app: achievement-collector
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.achievementCollector.storage.size | default "5Gi" }}
{{- if .Values.achievementCollector.ingress.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: achievement-collector
  labels:
    {{- include "threads.labels" . | nindent 4 }}
    app: achievement-collector
  {{- with .Values.achievementCollector.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if .Values.achievementCollector.ingress.tls }}
  tls:
  {{- range .Values.achievementCollector.ingress.tls }}
  - hosts:
    {{- range .hosts }}
    - {{ . | quote }}
    {{- end }}
    secretName: {{ .secretName }}
  {{- end }}
  {{- end }}
  rules:
  {{- range .Values.achievementCollector.ingress.hosts }}
  - host: {{ .host | quote }}
    http:
      paths:
      {{- range .paths }}
      - path: {{ .path }}
        pathType: {{ .pathType }}
        backend:
          service:
            name: achievement-collector
            port:
              number: {{ $.Values.achievementCollector.service.port }}
      {{- end }}
  {{- end }}
{{- end }}
{{- end }}
