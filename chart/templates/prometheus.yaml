{{- if .Values.monitoring.prometheus.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  labels:
    app: prometheus
    {{- include "threads.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        {{- include "threads.labels" . | nindent 8 }}
    spec:
      containers:
      - name: prometheus
        image: "{{ .Values.monitoring.prometheus.image.repository }}:{{ .Values.monitoring.prometheus.image.tag }}"
        ports:
        - containerPort: 9090
          name: prometheus
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus/
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --storage.tsdb.retention.time=15d
        - --web.enable-lifecycle
        resources:
          {{- toYaml .Values.monitoring.prometheus.resources | nindent 10 }}
        volumeMounts:
        - name: prometheus-config-volume
          mountPath: /etc/prometheus/
        - name: prometheus-storage-volume
          mountPath: /prometheus/
        {{- if .Values.monitoring.alertmanager.enabled }}
        - name: prometheus-alert-rules
          mountPath: /etc/prometheus/rules
        {{- end }}
      volumes:
      - name: prometheus-config-volume
        configMap:
          defaultMode: 420
          name: prometheus-server-conf
      - name: prometheus-storage-volume
        {{- if .Values.monitoring.prometheus.persistence.enabled }}
        persistentVolumeClaim:
          claimName: prometheus-pvc
        {{- else }}
        emptyDir: {}
        {{- end }}
      {{- if .Values.monitoring.alertmanager.enabled }}
      - name: prometheus-alert-rules
        configMap:
          name: prometheus-alert-rules
      {{- end }}

---
{{- if .Values.monitoring.prometheus.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  labels:
    {{- include "threads.labels" . | nindent 4 }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.monitoring.prometheus.persistence.size }}
  {{- if .Values.monitoring.prometheus.persistence.storageClass }}
  storageClassName: {{ .Values.monitoring.prometheus.persistence.storageClass }}
  {{- end }}

---
{{- end }}
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  labels:
    app: prometheus
    {{- include "threads.labels" . | nindent 4 }}
spec:
  ports:
  - port: 9090
    targetPort: 9090
    name: prometheus
  selector:
    app: prometheus

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-server-conf
  labels:
    {{- include "threads.labels" . | nindent 4 }}
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    {{- if .Values.monitoring.alertmanager.enabled }}
    # Rule files specify a list of paths from which rules are read
    rule_files:
      - "/etc/prometheus/rules/*.yml"

    # Alertmanager configuration
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093
    {{- end }}

    scrape_configs:
    - job_name: 'threads-agent-orchestrator'
      static_configs:
      - targets: ['orchestrator:9090']
      metrics_path: '/metrics'
      scrape_interval: 15s

    - job_name: 'threads-agent-celery-worker'
      static_configs:
      - targets: ['celery-worker:9090']
      metrics_path: '/metrics'
      scrape_interval: 15s

    - job_name: 'threads-agent-persona-runtime'
      static_configs:
      - targets: ['persona-runtime:9090']
      metrics_path: '/metrics'
      scrape_interval: 15s

    - job_name: 'threads-agent-fake-threads'
      static_configs:
      - targets: ['fake-threads:9090']
      metrics_path: '/metrics'
      scrape_interval: 15s

    # Kubernetes metrics (if available)
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

---
{{- if .Values.monitoring.alertmanager.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-alert-rules
  labels:
    {{- include "threads.labels" . | nindent 4 }}
data:
  alert-rules.yml: |
{{ .Files.Get "monitoring/alertmanager/alert-rules.yml" | indent 4 }}
{{- end }}
{{- end }}
