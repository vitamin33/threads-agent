apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "threads-agent.fullname" . }}-viral-pattern-engine
  labels:
    app: viral-pattern-engine
    {{- include "threads-agent.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.viralPatternEngine.replicas | default 3 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Zero downtime deployment
  selector:
    matchLabels:
      app: viral-pattern-engine
      {{- include "threads-agent.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: viral-pattern-engine
        {{- include "threads-agent.selectorLabels" . | nindent 8 }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      # Init container to pre-download models
      initContainers:
      - name: model-downloader
        image: "{{ .Values.viralPatternEngine.image.repository }}:{{ .Values.viralPatternEngine.image.tag }}"
        command: 
        - python
        - -c
        - |
          print("Downloading ML models...")
          try:
              from transformers import pipeline
              pipeline("text-classification", model="j-hartmann/emotion-english-distilroberta-base")
              print("BERT model downloaded successfully")
          except Exception as e:
              print(f"Model download failed: {e}")
          print("Model download complete")
        volumeMounts:
        - name: model-cache
          mountPath: /root/.cache
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
      
      containers:
      - name: viral-pattern-engine
        image: "{{ .Values.viralPatternEngine.image.repository }}:{{ .Values.viralPatternEngine.image.tag }}"
        imagePullPolicy: {{ .Values.viralPatternEngine.image.pullPolicy }}
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        # Performance tuning
        - name: WORKERS
          value: "4"  # Uvicorn workers
        - name: WORKER_CLASS
          value: "uvicorn.workers.UvicornWorker"
        - name: WORKER_CONNECTIONS
          value: "1000"
        - name: KEEPALIVE
          value: "5"
        
        # Model configuration
        - name: ENABLE_BERT
          value: "{{ .Values.viralPatternEngine.models.bert.enabled | default true }}"
        - name: ENABLE_VADER
          value: "{{ .Values.viralPatternEngine.models.vader.enabled | default true }}"
        - name: BERT_MODEL
          value: "{{ .Values.viralPatternEngine.models.bert.model | default "j-hartmann/emotion-english-distilroberta-base" }}"
        - name: BERT_BATCH_SIZE
          value: "{{ .Values.viralPatternEngine.models.bert.batchSize | default 8 }}"
        - name: WARM_UP_MODELS
          value: "true"
        
        # Cache configuration
        - name: EMOTION_CACHE_SIZE
          value: "{{ .Values.viralPatternEngine.cache.size | default 1000 }}"
        
        # Database connection pooling
        - name: DATABASE_POOL_SIZE
          value: "{{ .Values.viralPatternEngine.database.poolSize | default 20 }}"
        - name: DATABASE_MAX_OVERFLOW
          value: "{{ .Values.viralPatternEngine.database.maxOverflow | default 10 }}"
        - name: DATABASE_POOL_TIMEOUT
          value: "{{ .Values.viralPatternEngine.database.poolTimeout | default 30 }}"
        
        # Resource optimization
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: MALLOC_TRIM_THRESHOLD_
          value: "0"  # Return memory to OS more aggressively
        - name: PYTHONMALLOC
          value: "malloc"  # Better memory management
        
        # Model cache directory
        - name: TRANSFORMERS_CACHE
          value: "/root/.cache/huggingface"
        - name: HF_HOME
          value: "/root/.cache/huggingface"
        
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 40  # Allow time for model loading
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        # Startup probe for slow model loading
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30  # Up to 5 minutes for model loading
        
        resources:
          requests:
            memory: "{{ .Values.viralPatternEngine.resources.requests.memory | default "1Gi" }}"
            cpu: "{{ .Values.viralPatternEngine.resources.requests.cpu | default "500m" }}"
            ephemeral-storage: "2Gi"  # For model storage
          limits:
            memory: "{{ .Values.viralPatternEngine.resources.limits.memory | default "2Gi" }}"
            cpu: "{{ .Values.viralPatternEngine.resources.limits.cpu | default "2" }}"
            ephemeral-storage: "4Gi"
        
        volumeMounts:
        - name: model-cache
          mountPath: /root/.cache
        - name: tmp
          mountPath: /tmp
        
        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: model-cache
        emptyDir:
          sizeLimit: 4Gi
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      
      # Node affinity for GPU nodes if available
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node.kubernetes.io/instance-type
                operator: In
                values:
                - g4dn.xlarge
                - g4dn.2xlarge
          - weight: 50
            preference:
              matchExpressions:
              - key: workload-type
                operator: In
                values:
                - ml
                - inference
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - viral-pattern-engine
              topologyKey: kubernetes.io/hostname
      
      # Tolerate spot instances for cost savings
      tolerations:
      - key: spot
        operator: Equal
        value: "true"
        effect: NoSchedule
      - key: ml-workload
        operator: Equal
        value: "true"
        effect: NoSchedule

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "threads-agent.fullname" . }}-viral-pattern-engine
  labels:
    app: viral-pattern-engine
    {{- include "threads-agent.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: viral-pattern-engine
    {{- include "threads-agent.selectorLabels" . | nindent 4 }}

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "threads-agent.fullname" . }}-viral-pattern-engine-hpa
  labels:
    app: viral-pattern-engine
    {{- include "threads-agent.labels" . | nindent 4 }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "threads-agent.fullname" . }}-viral-pattern-engine
  minReplicas: {{ .Values.viralPatternEngine.autoscaling.minReplicas | default 2 }}
  maxReplicas: {{ .Values.viralPatternEngine.autoscaling.maxReplicas | default 10 }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: {{ .Values.viralPatternEngine.autoscaling.targetCPUUtilizationPercentage | default 70 }}
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: {{ .Values.viralPatternEngine.autoscaling.targetMemoryUtilizationPercentage | default 80 }}
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"  # Scale up if >100 req/s per pod
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # Wait 5 minutes before scaling down
      policies:
      - type: Percent
        value: 50  # Scale down by max 50% at once
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60  # Scale up faster
      policies:
      - type: Percent
        value: 100  # Can double pods at once
        periodSeconds: 60
      - type: Pods
        value: 4  # Or add 4 pods at once
        periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {{ include "threads-agent.fullname" . }}-viral-pattern-engine-pdb
  labels:
    app: viral-pattern-engine
    {{- include "threads-agent.labels" . | nindent 4 }}
spec:
  minAvailable: {{ .Values.viralPatternEngine.podDisruptionBudget.minAvailable | default 1 }}
  selector:
    matchLabels:
      app: viral-pattern-engine
      {{- include "threads-agent.selectorLabels" . | nindent 6 }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "threads-agent.fullname" . }}-viral-pattern-engine-config
  labels:
    app: viral-pattern-engine
    {{- include "threads-agent.labels" . | nindent 4 }}
data:
  gunicorn.conf.py: |
    import multiprocessing
    
    # Performance settings
    workers = int(os.environ.get('WORKERS', multiprocessing.cpu_count() * 2 + 1))
    worker_class = 'uvicorn.workers.UvicornWorker'
    worker_connections = 1000
    max_requests = 1000
    max_requests_jitter = 50
    timeout = 300
    keepalive = 5
    
    # Logging
    accesslog = '-'
    errorlog = '-'
    loglevel = 'info'
    
    # Server mechanics
    preload_app = True  # Load app before forking workers
    daemon = False
    
    # Worker lifecycle
    def worker_int(worker):
        worker.log.info("Worker received INT or QUIT signal")
    
    def pre_fork(server, worker):
        server.log.info(f"Worker spawned (pid: {worker.pid})")
    
    def post_fork(server, worker):
        server.log.info(f"Worker spawned (pid: {worker.pid})")
    
    def worker_abort(worker):
        worker.log.info(f"Worker aborted (pid: {worker.pid})")