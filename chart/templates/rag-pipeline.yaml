{{- if .Values.ragPipeline.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "threads.fullname" . }}-rag-pipeline
  labels:
    {{- include "threads.labels" . | nindent 4 }}
    app.kubernetes.io/component: rag-pipeline
spec:
  replicas: {{ .Values.ragPipeline.replicaCount | default 3 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: rag-pipeline
  template:
    metadata:
      labels:
        app: rag-pipeline
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - rag-pipeline
              topologyKey: kubernetes.io/hostname
      containers:
      - name: rag-pipeline
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        image: "{{ .Values.ragPipeline.image.repository }}:{{ .Values.ragPipeline.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.ragPipeline.image.pullPolicy }}
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 45
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12
        resources:
          {{- toYaml .Values.ragPipeline.resources | nindent 12 }}
        env:
        - name: DATABASE_URL
          value: "postgresql+psycopg2://postgres:{{ .Values.postgres.auth.postgresPassword }}@postgres:5432/postgres"
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: openai-secret
              key: OPENAI_API_KEY
        - name: QDRANT_URL
          value: "http://{{ include "threads.fullname" . }}-qdrant:6333"
        - name: REDIS_URL
          value: "redis://{{ include "threads.fullname" . }}-redis:6379"
        # Performance tuning
        - name: RAG_TOP_K
          value: "{{ .Values.ragPipeline.config.topK | default 20 }}"
        - name: RAG_RERANK_TOP_K
          value: "{{ .Values.ragPipeline.config.rerankTopK | default 10 }}"
        - name: RAG_MIN_SCORE
          value: "{{ .Values.ragPipeline.config.minScore | default 0.7 }}"
        - name: RAG_BATCH_SIZE
          value: "{{ .Values.ragPipeline.config.batchSize | default 50 }}"
        - name: RAG_CACHE_TTL_SECONDS
          value: "{{ .Values.ragPipeline.config.cacheTTL | default 1800 }}"
        # Connection pools
        - name: QDRANT_POOL_SIZE
          value: "{{ .Values.ragPipeline.config.qdrantPoolSize | default 20 }}"
        - name: REDIS_POOL_SIZE
          value: "{{ .Values.ragPipeline.config.redisPoolSize | default 15 }}"
        - name: EMBEDDING_BATCH_SIZE
          value: "{{ .Values.ragPipeline.config.embeddingBatchSize | default 100 }}"
        - name: MAX_CONCURRENT_BATCHES
          value: "{{ .Values.ragPipeline.config.maxConcurrentBatches | default 3 }}"
        # Python/FastAPI optimization
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: PYTHONASYNCIODEBUG
          value: "0"
        - name: PYTHONHASHSEED
          value: "0"
        - name: UVICORN_WORKERS
          value: "{{ .Values.ragPipeline.config.uvicornWorkers | default 1 }}"
        - name: UVICORN_BACKLOG
          value: "{{ .Values.ragPipeline.config.uvicornBacklog | default 2048 }}"
        volumeMounts:
        - name: embedding-cache
          mountPath: /app/cache/embeddings
        - name: model-cache
          mountPath: /app/cache/models
        - name: tmp-storage
          mountPath: /tmp
      volumes:
      - name: embedding-cache
        emptyDir:
          sizeLimit: 500Mi
          medium: Memory
      - name: model-cache
        emptyDir:
          sizeLimit: 200Mi
      - name: tmp-storage
        emptyDir:
          sizeLimit: 300Mi
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "threads.fullname" . }}-rag-pipeline
  labels:
    {{- include "threads.labels" . | nindent 4 }}
    app.kubernetes.io/component: rag-pipeline
spec:
  type: {{ .Values.ragPipeline.service.type | default "ClusterIP" }}
  ports:
  - port: {{ .Values.ragPipeline.service.port | default 8000 }}
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: rag-pipeline
---
{{- if .Values.ragPipeline.autoscaling.enabled }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "threads.fullname" . }}-rag-pipeline
  labels:
    {{- include "threads.labels" . | nindent 4 }}
    app.kubernetes.io/component: rag-pipeline
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "threads.fullname" . }}-rag-pipeline
  minReplicas: {{ .Values.ragPipeline.autoscaling.minReplicas | default 2 }}
  maxReplicas: {{ .Values.ragPipeline.autoscaling.maxReplicas | default 8 }}
  metrics:
  {{- if .Values.ragPipeline.autoscaling.targetCPUUtilizationPercentage }}
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: {{ .Values.ragPipeline.autoscaling.targetCPUUtilizationPercentage }}
  {{- end }}
  {{- if .Values.ragPipeline.autoscaling.targetMemoryUtilizationPercentage }}
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: {{ .Values.ragPipeline.autoscaling.targetMemoryUtilizationPercentage }}
  {{- end }}
  {{- with .Values.ragPipeline.autoscaling.customMetrics }}
  {{- toYaml . | nindent 2 }}
  {{- end }}
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 120
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 120
{{- end }}
---
{{- if and .Values.ragPipeline.serviceMonitor.enabled (lookup "apiextensions.k8s.io/v1" "CustomResourceDefinition" "" "servicemonitors.monitoring.coreos.com") }}
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: {{ include "threads.fullname" . }}-rag-pipeline
  labels:
    {{- include "threads.labels" . | nindent 4 }}
    app.kubernetes.io/component: rag-pipeline
spec:
  selector:
    matchLabels:
      app: rag-pipeline
  endpoints:
  - port: http
    interval: 30s
    path: /metrics
    honorLabels: true
    scrapeTimeout: 10s
{{- end }}
---
{{- if .Values.ragPipeline.pdb.enabled }}
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {{ include "threads.fullname" . }}-rag-pipeline
  labels:
    {{- include "threads.labels" . | nindent 4 }}
    app.kubernetes.io/component: rag-pipeline
spec:
  minAvailable: {{ .Values.ragPipeline.pdb.minAvailable | default 2 }}
  selector:
    matchLabels:
      app: rag-pipeline
{{- end }}
{{- end }}