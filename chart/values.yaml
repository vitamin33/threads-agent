# /chart/values.yaml
nameOverride: ""
fullnameOverride: ""

# ───────── core service images ─────────
image:
  repository: ghcr.io/threads-agent-stack/orchestrator
  tag: "0.2.0"

personaRuntime:
  image:
    repository: ghcr.io/threads-agent-stack/persona-runtime
    tag: "0.3.0"
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  env:
    - name: MLFLOW_CLIENT_POOL_SIZE
      value: "5"
    - name: MLFLOW_CACHE_ENABLED
      value: "true"

# RabbitMQ broker DSN used by orchestrator / Celery
rabbitmq:
  url: "amqp://user:pass@rabbitmq:5672/%2f"

# ───────── new stub-stack toggles (all OFF by default) ─────────
postgres:
  enabled: false                   # turn ON in dev/ci values
  storage: 1Gi                     # PVC size; template uses .Values.postgres.storage
  auth:
    postgresPassword: "postgres"   # override in production
    database: "threads"

minio:
  enabled: false                   # turn ON in dev values
  accessKey: "minio"               # overridden in env Secret
  secretKey: "minio123"
  storage: 1Gi

fakeThreads:
  enabled: false                   # turn ON in dev/ci values
  image:
    repository: ghcr.io/threads-agent-stack/fake-threads
    tag: "0.1.0"
  port: 9009
  pullSecret: ""                   # leave blank unless you push to a private registry

threadsService:                    # orchestrator ↔︎ fake-threads alias
  name: fake-threads
  port: 9009

celeryWorker:
  enabled: true
  image:
    repository: ghcr.io/threads-agent-stack/celery-worker
    tag: "0.2.0"

viralEngine:
  enabled: false                   # turn ON in dev/ci values
  image:
    repository: ghcr.io/threads-agent-stack/viral-engine
    tag: "0.1.0"

viralPatternEngine:
  enabled: false                   # turn ON in dev/ci values
  image:
    repository: ghcr.io/threads-agent-stack/viral-pattern-engine
    tag: "0.1.0"
  resources:
    requests:
      memory: "512Mi"
      cpu: "200m"
    limits:
      memory: "1Gi"
      cpu: "1000m"

threadsAdaptor:
  enabled: false                   # turn ON when using real Threads API
  image:
    repository: threads-adaptor
    tag: "local"
    pullPolicy: IfNotPresent
  replicas: 1
  rateLimit: 20                    # requests per minute
  credentials:
    appId: ""                      # Threads App ID
    appSecret: ""                  # Threads App Secret

revenue:
  enabled: false                   # turn ON to enable revenue infrastructure
  image:
    repository: revenue
    tag: "local"
    pullPolicy: IfNotPresent
  replicas: 1
  stripe:
    apiKey: ""                     # Stripe API key (sk_test_... or sk_live_...)
    webhookSecret: ""              # Stripe webhook endpoint secret
    priceBasic: ""                 # Stripe price ID for basic tier
    pricePro: ""                   # Stripe price ID for pro tier
    priceEnterprise: ""            # Stripe price ID for enterprise tier
  affiliateId: "viral123"          # Default affiliate tracking ID
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

finopsEngine:
  enabled: false                   # turn ON to enable FinOps monitoring
  image:
    repository: finops-engine
    tag: "local"
    pullPolicy: IfNotPresent
  replicas: 1
  service:
    type: ClusterIP
    port: 8095
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  # Alert webhook configuration
  alertWebhooks:
    slack: ""                      # Slack webhook URL
    discord: ""                    # Discord webhook URL
    telegramBotToken: ""          # Telegram bot token
    telegramChatId: ""            # Telegram chat ID
    customWebhook: ""             # Custom webhook URL

threadsAdaptor:
  credentials:
    accessToken: ""                # Threads Access Token
    userId: ""                     # Threads User ID
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  extraEnv: []

# MLflow Performance Optimization Configuration
mlflow:
  trackingUri: "http://mlflow:5000"
  registryUri: "http://mlflow:5000"
  performanceOptimization:
    enabled: true
    
    # Connection Pool Settings
    clientPoolSize: 10
    maxIdleTime: 600               # seconds
    cleanupInterval: 300           # seconds
    
    # Cache Configuration
    cacheEnabled: true
    cacheTtl: 300                  # seconds
    cacheMaxSize: 128              # number of cached items
    
    # Batch Operation Settings
    batchSize: 50
    batchTimeout: 30               # seconds
    
    # Thread Pool Configuration
    threadPoolSize: 4
    
    # Memory Management
    memoryLimitMb: 512
    gcInterval: 60                 # seconds
    
    # Performance Monitoring
    monitoring:
      enabled: true
      prometheus: true
      serviceMonitor:
        enabled: true
        interval: "30s"
        scrapeTimeout: "10s"
    
    # Auto-scaling Configuration
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 10
      targetCPU: 70
      targetMemory: 80
      customMetrics:
        enabled: true
        targetOpsPerSecond: "100"
      scaleUp:
        stabilizationWindowSeconds: 60
        percentPolicy: 100
        periodSeconds: 15
      scaleDown:
        stabilizationWindowSeconds: 300
        percentPolicy: 50
        periodSeconds: 60

# Enhanced resource limits for services using MLflow
orchestrator:
  resources:
    requests:
      memory: "512Mi"
      cpu: "200m"
    limits:
      memory: "1Gi"
      cpu: "1000m"
  env:
    - name: MLFLOW_CLIENT_POOL_SIZE
      value: "10"
    - name: MLFLOW_CACHE_ENABLED
      value: "true"
    - name: MLFLOW_PERFORMANCE_MONITORING_ENABLED
      value: "true"

# ───────── generic chart knobs ─────────
replicaCount: 1

service:
  type: ClusterIP
  port: 8080

resources: {}

# ───────── monitoring & observability ─────────
monitoring:
  prometheus:
    enabled: false                    # turn ON in dev/prod values
    url: http://prometheus:9090
    image:
      repository: prom/prometheus
      tag: "v2.47.0"
    persistence:
      enabled: false
      size: 2Gi
      storageClass: ""
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
  grafana:
    enabled: false                     # turn ON in dev/prod values
    image:
      repository: grafana/grafana
      tag: "10.2.0"
    adminPassword: admin123           # override in prod
    plugins: ""                       # comma-separated list of plugins
    persistence:
      enabled: false
      size: 1Gi
      storageClass: ""
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
  alertmanager:
    enabled: false                        # turn ON in dev/prod values
    image:
      repository: prom/alertmanager
      tag: "v0.26.0"
    replicas: 1
    externalUrl: ""                       # override in prod (e.g., https://alerts.company.com)
    logLevel: info
    dataRetention: 120h
    persistence:
      enabled: false
      size: 1Gi
      storageClass: ""
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi
    # Email configuration
    smtp:
      smarthost: "localhost:587"
      from: "alerts@threads-agent.com"
      auth:
        username: ""                      # override in prod
        password: ""                      # override in prod
    # PagerDuty integration
    pagerduty:
      enabled: false                      # turn ON in prod values
      integrationKey: ""                  # override in prod (secret)
    # Slack integration
    slack:
      enabled: false                      # turn ON in dev/prod values
      apiUrl: ""                          # override with webhook URL
      warningsChannel: "#alerts-warnings"
      infrastructureChannel: "#alerts-infrastructure"
    # Email recipients
    email:
      enabled: false                      # turn ON in prod values
      from: "alerts@threads-agent.com"
      businessRecipients: "business@threads-agent.com"
      infrastructureRecipients: "ops@threads-agent.com"

# Redis cache for trend analysis and token optimization
redis:
  enabled: false                          # turn ON in dev/prod values for caching
  image:
    repository: redis
    tag: "7-alpine"
  port: 6379
  persistence:
    enabled: false
    size: 1Gi
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  cluster:
    enabled: false                        # turn ON for Redis cluster mode
    nodes: 3
    replicas: 1

# ───────── CI Monitor (disabled by default) ─────────
ciMonitor:
  enabled: false
  image:
    repository: ci-monitor
    tag: local
    pullPolicy: IfNotPresent
  githubToken: ""
  anthropicApiKey: ""
  monitorInterval: "300"
  autoApprove: "false"
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi

# ───────── Achievement Collector (disabled by default) ─────────
achievementCollector:
  enabled: false                   # turn ON in dev/prod values
  replicas: 1
  image:
    repository: achievement-collector
    tag: "local"
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi
  storage:
    size: 10Gi
    className: ""                  # Use default storage class
  service:
    type: ClusterIP
    port: 8090
  github:
    webhookSecret: ""             # Set in secrets
    token: ""                     # GitHub PAT for API access
  prometheus:
    scrapeInterval: "24"          # hours between metric scrapes
  sqlite:
    enabled: false                # use PostgreSQL by default
  ingress:
    enabled: false
    host: achievements.example.com
    annotations: {}
    tls: []
  env: []

# ───────── Performance Monitor (disabled by default) ─────────
performanceMonitor:
  enabled: false                   # turn ON in dev/prod values
  replicas: 1
  image:
    repository: performance-monitor
    tag: "local"
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 300m
      memory: 384Mi
    requests:
      cpu: 100m
      memory: 256Mi
  logLevel: "INFO"
  # Early kill configuration
  killThreshold: 0.5               # Kill if engagement < 50% of expected
  minInteractions: 10              # Minimum interactions before evaluation
  timeoutMinutes: 10               # Maximum monitoring duration
  checkIntervalSeconds: 30         # How often to check performance
  service:
    type: ClusterIP
    httpPort: 8085
    metricsPort: 9095

# ───────── Viral Metrics Collection (E6) ─────────
viralMetrics:
  enabled: false                   # turn ON in dev/prod values
  replicas: 2
  image:
    repository: viral-metrics
    tag: "local"
    pullPolicy: IfNotPresent
  
  # Performance tuning
  batchSize: 25                    # Posts per batch (optimized from 50)
  maxParallelTasks: 10             # Max concurrent metric calculations
  cacheTtl: 300                    # Redis cache TTL in seconds
  
  # Autoscaling configuration
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    
  # Resource requests/limits optimized for viral metrics workload
  resources:
    requests:
      memory: "256Mi"              # Minimum for efficient processing
      cpu: "100m"                  # Baseline CPU requirement
    limits:
      memory: "1Gi"                # Prevent memory leaks from impacting cluster
      cpu: "500m"                  # Allow burst processing for batch operations
  
  # Service configuration
  service:
    type: ClusterIP
    port: 8080
    metricsPort: 9090

# ───────── CI/CD Pipeline (disabled by default) ─────────
cicdPipeline:
  enabled: false                   # turn ON in dev/prod values
  replicas: 2
  image:
    repository: cicd-pipeline
    tag: "local"
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  service:
    type: ClusterIP
    port: 8087
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    customMetrics:
      enabled: false               # turn ON for custom metrics scaling
    scaleUp:
      stabilizationWindowSeconds: 60
      percentPolicy: 100
      periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      percentPolicy: 50
      periodSeconds: 60
  monitoring:
    enabled: false                 # turn ON in dev/prod values
  redis:
    enabled: false                 # turn ON for performance optimization
    host: redis
    port: 6379
  sidecar:
    enabled: false                 # turn ON for sidecar deployment pattern
  github:
    enabled: false                 # turn ON for GitHub integration
    token: ""                      # GitHub personal access token
    webhookSecret: ""              # GitHub webhook secret
  networkPolicy:
    enabled: false                 # turn ON for network segmentation
  podDisruptionBudget:
    enabled: false                 # turn ON for high availability
    minAvailable: 1

# ───────── OpenAI Configuration ─────────
openai:
  enabled: false                   # turn ON when using OpenAI
  apiKey: ""                       # Set via secret or environment variable

# ───────── Qdrant Vector Database ─────────
qdrant:
  enabled: false                   # turn ON for vector search capabilities
  image:
    repository: qdrant/qdrant
    tag: "latest"
  port: 6333
  persistence:
    enabled: false
    size: 2Gi
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi
