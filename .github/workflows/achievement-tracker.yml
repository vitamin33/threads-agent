name: Achievement Tracker V2 (Robust)

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  track-achievement:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install minimal dependencies
        run: |
          pip install psycopg2-binary requests python-dotenv
          
      - name: Enhanced PR Analysis
        id: analyze_pr
        uses: actions/github-script@v6
        with:
          script: |
            const pr = context.payload.pull_request;
            
            // Get detailed file analysis
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            // Technology stack analysis
            const techStack = new Set();
            const serviceChanges = new Set();
            let hasTests = false;
            let hasDocs = false;
            let hasDatabase = false;
            let hasAPI = false;
            
            files.data.forEach(file => {
              const path = file.filename.toLowerCase();
              const patch = file.patch || '';
              
              // Technology detection
              if (path.endsWith('.py')) techStack.add('Python');
              if (path.endsWith('.ts') || path.endsWith('.tsx')) techStack.add('TypeScript');
              if (path.includes('dockerfile')) techStack.add('Docker');
              if (path.includes('test')) hasTests = true;
              if (path.endsWith('.md')) hasDocs = true;
              if (path.includes('model') || path.includes('migration')) hasDatabase = true;
              if (path.includes('api') || path.includes('endpoint')) hasAPI = true;
              
              // Advanced tech detection from content
              if (patch.includes('fastapi') || patch.includes('FastAPI')) techStack.add('FastAPI');
              if (patch.includes('sqlalchemy') || patch.includes('SQLAlchemy')) techStack.add('SQLAlchemy');
              if (patch.includes('kubernetes') || patch.includes('kubectl')) techStack.add('Kubernetes');
              if (patch.includes('thompson') || patch.includes('sampling')) techStack.add('Statistical Analysis');
              if (patch.includes('experiment') || patch.includes('ab_test')) techStack.add('A/B Testing');
              if (patch.includes('pytest') || patch.includes('test_')) techStack.add('Testing');
              
              // Service detection
              if (path.startsWith('services/')) {
                serviceChanges.add(path.split('/')[1]);
              }
            });
            
            // Business impact analysis
            const title = pr.title.toLowerCase();
            const body = (pr.body || '').toLowerCase();
            const content = title + ' ' + body;
            
            const businessImpact = {
              affects_performance: /performance|optimization|faster|speed|latency/.test(content),
              affects_cost: /cost|reduce|efficient|savings/.test(content),
              affects_security: /security|vulnerability|auth/.test(content),
              affects_automation: /automation|automated|workflow/.test(content),
              affects_user_experience: /ui|ux|user|experience/.test(content),
              affects_scalability: /scale|scalable|distributed/.test(content),
              is_feature: title.startsWith('feat'),
              is_bugfix: title.startsWith('fix'),
              is_breaking_change: body.includes('breaking change'),
              affects_api: hasAPI || /api|endpoint|route/.test(content),
              affects_ml: /ml|machine learning|algorithm|model/.test(content)
            };
            
            // Calculate impact score
            let impactScore = 60; // Base for any merged PR
            
            // Size bonuses
            const totalChanges = (pr.additions || 0) + (pr.deletions || 0);
            if (totalChanges >= 1000) impactScore += 25;
            else if (totalChanges >= 500) impactScore += 15;
            else if (totalChanges >= 200) impactScore += 10;
            
            // Business impact bonuses
            if (businessImpact.affects_performance) impactScore += 15;
            if (businessImpact.affects_security) impactScore += 15;
            if (businessImpact.affects_ml) impactScore += 20;
            if (businessImpact.is_feature) impactScore += 10;
            if (businessImpact.affects_api) impactScore += 10;
            
            // Quality bonuses
            if (hasTests) impactScore += 10;
            if (hasDocs) impactScore += 5;
            if (hasDatabase) impactScore += 10;
            
            impactScore = Math.min(impactScore, 100);
            
            // Calculate complexity score
            let complexityScore = 50;
            if (totalChanges >= 1000) complexityScore += 20;
            else if (totalChanges >= 500) complexityScore += 15;
            
            if (serviceChanges.size >= 3) complexityScore += 15;
            else if (serviceChanges.size >= 2) complexityScore += 10;
            
            if (techStack.has('Machine Learning') || techStack.has('Statistical Analysis')) complexityScore += 15;
            if (techStack.has('Kubernetes')) complexityScore += 10;
            
            complexityScore = Math.min(complexityScore, 100);
            
            // Comprehensive metrics object
            const metrics = {
              pr_number: pr.number,
              title: pr.title || '',
              body: (pr.body || '').substring(0, 1000), // Truncate for safety
              additions: pr.additions || 0,
              deletions: pr.deletions || 0,
              changed_files: pr.changed_files || 0,
              commits: pr.commits || 0,
              merged_at: pr.merged_at,
              created_at: pr.created_at,
              author: pr.user.login,
              labels: pr.labels?.map(l => l.name) || [],
              
              // Enhanced analysis
              tech_stack: Array.from(techStack),
              services_modified: Array.from(serviceChanges),
              quality_indicators: { hasTests, hasDocs, hasDatabase, hasAPI },
              business_impact: businessImpact,
              calculated_scores: { impactScore, complexityScore },
              
              // Metadata
              repository: context.repo.repo,
              pr_url: pr.html_url
            };
            
            core.setOutput('pr_analysis', JSON.stringify(metrics));

      - name: Create Achievement Record
        env:
          DATABASE_URL: ${{ secrets.ACHIEVEMENT_DB_URL }}
          PR_ANALYSIS: ${{ steps.analyze_pr.outputs.pr_analysis }}
        run: |
          python3 << 'EOF'
          import os
          import json
          import psycopg2
          from psycopg2.extras import Json
          from datetime import datetime, timezone
          
          # Parse PR analysis
          pr_analysis = json.loads(os.getenv('PR_ANALYSIS', '{}'))
          
          if not pr_analysis or 'pr_number' not in pr_analysis:
              print("⚠️  No PR analysis data available")
              exit(0)
          
          # Connect to database
          db_url = os.getenv('DATABASE_URL')
          if not db_url:
              print("⚠️  No DATABASE_URL configured")
              exit(0)
          
          try:
              conn = psycopg2.connect(db_url)
              cursor = conn.cursor()
              
              # Check if exists
              cursor.execute(
                  "SELECT id FROM achievements WHERE source_type = 'github_pr' AND source_id = %s",
                  (str(pr_analysis['pr_number']),)
              )
              
              if cursor.fetchone():
                  print(f"ℹ️  Achievement already exists for PR #{pr_analysis['pr_number']}")
                  exit(0)
              
              # Calculate timing
              created = datetime.fromisoformat(pr_analysis['created_at'].replace('Z', '+00:00'))
              merged = datetime.fromisoformat(pr_analysis['merged_at'].replace('Z', '+00:00'))
              duration = (merged - created).total_seconds() / 3600
              
              # Business value calculation
              impact = pr_analysis['calculated_scores']['impactScore']
              complexity = pr_analysis['calculated_scores']['complexityScore']
              
              business_value = {
                  "total_value": max(5000, complexity * 150),
                  "currency": "USD",
                  "period": "yearly", 
                  "type": "automation",
                  "confidence": 0.9,
                  "method": "automation_heuristic",
                  "breakdown": {
                      "complexity_factor": complexity * 150,
                      "base_value": 5000,
                      "multiplier": 2 if pr_analysis['business_impact']['affects_performance'] else 1
                  }
              }
              
              # Insert achievement
              cursor.execute("""
                  INSERT INTO achievements (
                      title, description, category, started_at, completed_at, duration_hours,
                      impact_score, complexity_score, business_value, time_saved_hours,
                      performance_improvement_pct, source_type, source_id, source_url,
                      evidence, tags, skills_demonstrated, ai_summary,
                      portfolio_ready, portfolio_section, display_priority,
                      created_at, updated_at
                  ) VALUES (
                      %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s
                  )
              """, (
                  f"Shipped: {pr_analysis['title']}",
                  pr_analysis['body'],
                  'feature' if pr_analysis['business_impact']['is_feature'] else 'bugfix' if pr_analysis['business_impact']['is_bugfix'] else 'optimization',
                  created,
                  merged,
                  duration,
                  impact,
                  complexity,
                  json.dumps(business_value),
                  max(1.0, complexity / 20),
                  10.0 if pr_analysis['business_impact']['affects_performance'] else 0.0,
                  'github_pr',
                  str(pr_analysis['pr_number']),
                  pr_analysis['pr_url'],
                  Json(pr_analysis),
                  Json(pr_analysis['labels']),
                  Json(pr_analysis['tech_stack'] + ['Collaboration', 'Code Review']),
                  f"Implemented {pr_analysis['tech_stack'][0] if pr_analysis['tech_stack'] else 'technical'} solution with {len(pr_analysis['services_modified'])} service modifications",
                  impact >= 70,
                  'engineering',
                  impact,
                  datetime.now(timezone.utc),
                  datetime.now(timezone.utc)
              ))
              
              conn.commit()
              
              print(f"✅ Successfully created achievement:")
              print(f"   PR: #{pr_analysis['pr_number']} - {pr_analysis['title']}")
              print(f"   Impact Score: {impact}")
              print(f"   Complexity Score: {complexity}")
              print(f"   Business Value: ${business_value['total_value']:,}")
              print(f"   Tech Stack: {', '.join(pr_analysis['tech_stack'][:5])}")
              print(f"   Services Modified: {', '.join(pr_analysis['services_modified'])}")
              
          except psycopg2.Error as e:
              print(f"❌ Database error: {e}")
              if 'conn' in locals():
                  conn.rollback()
          except Exception as e:
              print(f"❌ General error: {e}")
          finally:
              if 'cursor' in locals():
                  cursor.close()
              if 'conn' in locals():
                  conn.close()
          EOF

      - name: Validate Achievement Creation
        env:
          DATABASE_URL: ${{ secrets.ACHIEVEMENT_DB_URL }}
        run: |
          python3 << 'EOF'
          import os
          import psycopg2
          
          db_url = os.getenv('DATABASE_URL')
          if not db_url:
              print("No DATABASE_URL for validation")
              exit(0)
          
          try:
              conn = psycopg2.connect(db_url)
              cursor = conn.cursor()
              
              # Get recent achievements
              cursor.execute("""
                  SELECT title, impact_score, complexity_score, created_at
                  FROM achievements 
                  WHERE source_type = 'github_pr'
                  ORDER BY created_at DESC 
                  LIMIT 5
              """)
              
              recent = cursor.fetchall()
              
              print("📊 Recent Achievements:")
              for achievement in recent:
                  print(f"   • {achievement[0][:50]}... (Impact: {achievement[1]}, Complexity: {achievement[2]})")
              
              print(f"\n✅ Validation complete - {len(recent)} recent achievements found")
              
          except Exception as e:
              print(f"❌ Validation error: {e}")
          finally:
              if 'cursor' in locals():
                  cursor.close()
              if 'conn' in locals():
                  conn.close()
          EOF

      - name: Post Success Comment
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const pr = context.payload.pull_request;
            
            const comment = `## 🏆 Achievement Successfully Tracked!
            
            Your merged PR has been automatically analyzed and added to the achievement database:
            
            ### 📈 PR Metrics
            - **Code Changes**: +${pr.additions || 0} -${pr.deletions || 0} lines
            - **Files Modified**: ${pr.changed_files || 0}
            - **Commits**: ${pr.commits || 0}
            - **Author**: @${pr.user.login}
            
            ### 🎯 Impact Analysis
            The system automatically detected:
            - Technology stack used
            - Business impact indicators  
            - Complexity metrics
            - Portfolio readiness score
            
            This achievement is now available for:
            - Portfolio showcase integration
            - Business value reporting
            - Technical skill demonstration
            - Consultation case studies
            
            *Automated by Achievement Tracker V2 🤖*`;
            
            try {
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (e) {
              console.error('Failed to post comment:', e);
            }