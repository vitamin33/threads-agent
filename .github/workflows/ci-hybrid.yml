# .github/workflows/ci-hybrid.yml
# Phase 2: Hybrid CI with self-hosted runners for heavy workloads
name: ci-hybrid

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
      - '.env.example'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Fast checks on GitHub Actions (secure, reliable)
  security-and-lint:
    name: Security & Lint (GitHub Actions)
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Security scan
        uses: github/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_PYTHON_RUFF: true
          VALIDATE_PYTHON_BLACK: true
          VALIDATE_PYTHON_ISORT: true

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache linting tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .ruff_cache
            .mypy_cache
          key: lint-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}

      - name: Install and run linting
        run: |
          pip install ruff black isort mypy --prefer-binary
          ruff check . --output-format=github
          black --check --diff .
          isort --check --diff .

  # Heavy workloads on self-hosted runners
  integration-tests:
    name: Integration Tests (Self-Hosted)
    runs-on: [self-hosted, heavy, docker, k3d]
    timeout-minutes: 15
    if: ${{ !github.event.repository.fork }}  # Security: only for trusted repos
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            docker:
              - '**/Dockerfile'
              - 'docker-compose*.yml'
            k8s:
              - 'chart/**'
              - 'scripts/**'
            services:
              - 'services/**'

      - name: Setup Python environment
        if: steps.changes.outputs.services == 'true'
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        if: steps.changes.outputs.services == 'true'
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/pip
          key: self-hosted-deps-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        if: steps.changes.outputs.services == 'true'
        run: |
          pip install -U pip wheel setuptools
          pip install -r services/orchestrator/requirements.txt
          pip install -r tests/requirements.txt

      - name: Build and test with k3d
        if: steps.changes.outputs.docker == 'true' || steps.changes.outputs.k8s == 'true'
        env:
          OPENAI_API_KEY: test
        run: |
          # Use existing k3d cluster or create new one
          if ! k3d cluster list | grep -q "dev-ci"; then
            k3d cluster create dev-ci --agents 1 --registry-create dev-ci-registry:0.0.0.0:5111
          fi

          # Build only changed services
          just build-changed-services

          # Run e2e tests
          export PYTHONPATH=$PWD
          pytest tests/e2e/ -n auto --maxprocesses=8 --tb=short

      - name: Cleanup
        if: always()
        run: |
          # Cleanup containers but keep cluster for next run
          docker system prune -f
          
  # Unit tests on light self-hosted runners
  unit-tests-fast:
    name: Unit Tests (Self-Hosted Light)
    runs-on: [self-hosted, light, unit-tests]
    timeout-minutes: 5
    if: ${{ !github.event.repository.fork }}
    strategy:
      fail-fast: false
      matrix:
        service: [orchestrator, celery_worker, persona_runtime, fake_threads]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        run: |
          python3 -m venv .venv-${{ matrix.service }}
          source .venv-${{ matrix.service }}/bin/activate
          echo "$PWD/.venv-${{ matrix.service }}/bin" >> $GITHUB_PATH

      - name: Cache per-service
        uses: actions/cache@v4
        with:
          path: .venv-${{ matrix.service }}
          key: unit-${{ matrix.service }}-${{ hashFiles(format('services/{0}/requirements.txt', matrix.service)) }}

      - name: Install and test
        env:
          OPENAI_API_KEY: test
        run: |
          pip install -r services/${{ matrix.service }}/requirements.txt
          pip install pytest pytest-xdist
          
          pytest services/${{ matrix.service }}/tests/ -n auto --maxprocesses=4 -m "not e2e"

  # Fallback to GitHub Actions if self-hosted unavailable
  fallback-ci:
    name: Fallback CI (GitHub Actions)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ github.event.repository.fork || failure() }}
    steps:
      - name: Fallback message
        run: |
          echo "üîÑ Running fallback CI on GitHub Actions"
          echo "This may be due to:"
          echo "- Fork repository (security restriction)"
          echo "- Self-hosted runners unavailable"
          echo "- Previous job failures"

      - uses: actions/checkout@v4

      # Run essential tests only
      - name: Essential tests
        run: |
          echo "Running minimal test suite for safety"
          # Add essential fallback tests here

  summary:
    name: CI Summary
    needs: [security-and-lint, integration-tests, unit-tests-fast]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Report results
        run: |
          echo "## CI Results Summary"
          echo "- Security & Lint: ${{ needs.security-and-lint.result }}"
          echo "- Integration Tests: ${{ needs.integration-tests.result }}"
          echo "- Unit Tests: ${{ needs.unit-tests-fast.result }}"
          
          if [ "${{ needs.security-and-lint.result }}" != "success" ] || \
             [ "${{ needs.integration-tests.result }}" != "success" ] || \
             [ "${{ needs.unit-tests-fast.result }}" != "success" ]; then
            echo "‚ùå CI Failed"
            exit 1
          else
            echo "‚úÖ CI Passed"
          fi