name: Auto-Fix CI Failures

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  auto-fix:
    if: ${{ github.event.workflow_run.conclusion == 'failure' && github.event.workflow_run.event == 'pull_request' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install PyGithub anthropic requests python-dotenv

      - name: Download workflow logs
        uses: actions/github-script@v7
        id: download-logs
        with:
          script: |
            const logs = await github.rest.actions.downloadWorkflowRunLogs({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }}
            });
            require('fs').writeFileSync('logs.zip', Buffer.from(logs.data));

      - name: Extract and analyze logs
        id: analyze
        run: |
          unzip logs.zip
          python << 'EOF'
          import re
          import json

          errors = []
          fixable_patterns = [
              r"error: (.*)",
              r"ImportError: (.*)",
              r"mypy: (.*)",
              r"ruff: (.*)"
          ]

          for file in os.listdir('.'):
              if file.endswith('.txt'):
                  with open(file, 'r') as f:
                      content = f.read()
                      for pattern in fixable_patterns:
                          errors.extend(re.findall(pattern, content))

          # Check if errors are fixable
          fixable = any('import' in err or 'type' in err or 'format' in err for err in errors)

          with open('analysis.json', 'w') as f:
              json.dump({
                  'fixable': fixable,
                  'errors': errors[:20]
              }, f)
          EOF

      - name: Generate fixes with Claude
        if: steps.analyze.outputs.fixable == 'true'
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          python << 'EOF'
          import json
          import os
          from anthropic import Anthropic

          with open('analysis.json', 'r') as f:
              analysis = json.load(f)

          if not analysis['fixable']:
              exit(0)

          client = Anthropic(api_key=os.environ['ANTHROPIC_API_KEY'])

          prompt = f"""Fix these CI errors in a Python project:

          {chr(10).join(analysis['errors'][:10])}

          Provide a shell script that fixes these issues."""

          response = client.messages.create(
              model="claude-3-opus-20240229",
              max_tokens=2000,
              messages=[{"role": "user", "content": prompt}]
          )

          # Extract fix commands
          fix_script = response.content[0].text

          # Apply fixes
          os.system("just lint")  # Run auto-formatting
          os.system("isort .")
          os.system("black .")
          os.system("ruff check . --fix")
          EOF

      - name: Validate fixes
        run: |
          just check || echo "Some checks still failing"

      - name: Commit and push fixes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if [[ -n $(git status -s) ]]; then
            git add -A
            git commit -m "fix: Auto-fix CI failures

            ðŸ¤– Automated fixes applied by CI Auto-Fix workflow

            Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

            git push
          else
            echo "No changes to commit"
          fi

      - name: Comment on PR
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${context.payload.workflow_run.head_branch}`,
              state: 'open'
            });

            if (pr.data.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.data[0].number,
                body: 'ðŸ¤– **CI Auto-Fix Applied**\n\nI\'ve automatically fixed the CI failures. Please review the changes.'
              });
            }
