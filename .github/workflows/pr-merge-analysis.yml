name: PR Merge Analysis

on:
  pull_request:
    types: [closed]
    branches: [main]

concurrency:
  group: pr-merge-analysis-${{ github.event.pull_request.number }}
  cancel-in-progress: false

jobs:
  analyze-merged-pr:
    # Only run if PR was merged
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install GitHub CLI
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh -y
    
    - name: Final PR Value Analysis
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        PR_NUMBER=${{ github.event.pull_request.number }}
        echo "📊 Running final analysis for merged PR #$PR_NUMBER"
        
        # Run the smart analyzer with merge context
        python scripts/pr-value-analyzer-smart.py $PR_NUMBER --force
    
    - name: Create Merge Summary Comment
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const prNumber = ${{ github.event.pull_request.number }};
          const analysisFile = `pr_${prNumber}_value_analysis.json`;
          
          try {
            const data = JSON.parse(fs.readFileSync(analysisFile, 'utf8'));
            
            // Build merge summary comment
            let comment = '## 🎉 PR Merged - Final Value Analysis\n\n';
            
            comment += '**This PR has been merged!** Here\'s the final business value assessment:\n\n';
            
            // Summary metrics
            if (data.summary) {
              comment += '### 📊 Value Summary\n';
              comment += `- **Portfolio Value**: $${data.summary.portfolio_value?.toLocaleString() || 0}\n`;
              comment += `- **ROI**: ${data.summary.roi_percent || 0}%\n`;
              comment += `- **Overall Score**: ${data.summary.overall_score || 0}/10\n`;
              comment += `- **Confidence**: ${data.summary.confidence || 'medium'}\n\n`;
            }
            
            // Key achievements
            if (data.achievement_tags && data.achievement_tags.length > 0) {
              comment += '### 🏆 Key Achievements\n';
              data.achievement_tags.forEach(tag => {
                comment += `- ${tag.replace(/_/g, ' ')}\n`;
              });
              comment += '\n';
            }
            
            // Business impact
            if (data.business_metrics) {
              comment += '### 💰 Realized Business Impact\n';
              if (data.business_metrics.total_annual_savings) {
                comment += `- **Annual Savings**: $${data.business_metrics.total_annual_savings.toLocaleString()}\n`;
              }
              if (data.business_metrics.payback_period_months) {
                comment += `- **Payback Period**: ${data.business_metrics.payback_period_months} months\n`;
              }
              if (data.business_metrics.roi_three_year_percent) {
                comment += `- **3-Year ROI**: ${data.business_metrics.roi_three_year_percent}%\n`;
              }
              comment += '\n';
            }
            
            // Integration info
            comment += '### 🔗 Achievement Tracking\n';
            comment += 'This PR\'s value has been recorded in the achievement tracking system.\n';
            comment += `- PR #${prNumber}: "${data.pr_title || 'Untitled'}"\n`;
            comment += `- Merged: ${new Date().toISOString().split('T')[0]}\n`;
            comment += `- Author: @${data.pr_author || github.event.pull_request.user.login}\n\n`;
            
            comment += '---\n';
            comment += '*Final analysis generated on merge by PR Value Analyzer*';
            
            // Post comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });
            
          } catch (error) {
            console.error('Error posting merge analysis:', error);
          }
    
    - name: Store Final Metrics
      run: |
        # Create metrics directory if not exists
        mkdir -p .metrics/merged
        
        # Copy final analysis to metrics
        PR_NUMBER=${{ github.event.pull_request.number }}
        MERGE_DATE=$(date +%Y%m%d)
        
        cp pr_${PR_NUMBER}_value_analysis.json .metrics/merged/pr_${PR_NUMBER}_${MERGE_DATE}.json
        
        # Update metrics summary
        echo "Stored final metrics for PR #$PR_NUMBER"
    
    - name: Trigger Achievement Update
      if: success() && env.ACHIEVEMENT_COLLECTOR_URL != ''
      env:
        ACHIEVEMENT_COLLECTOR_URL: ${{ secrets.ACHIEVEMENT_COLLECTOR_URL }}
        ACHIEVEMENT_API_KEY: ${{ secrets.ACHIEVEMENT_API_KEY }}
      run: |
        # Update achievement collector with merge status
        if [ -n "$ACHIEVEMENT_COLLECTOR_URL" ]; then
          PR_NUMBER=${{ github.event.pull_request.number }}
          
          # Mark achievement as completed/merged
          curl -X PATCH \
            "${ACHIEVEMENT_COLLECTOR_URL}/pr-analysis/${PR_NUMBER}/merge" \
            -H "Authorization: Bearer ${ACHIEVEMENT_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{"merged": true, "merged_at": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' \
            --fail-with-body \
            || echo "Failed to update achievement collector (non-critical)"
        fi