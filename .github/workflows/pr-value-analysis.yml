name: PR Value Analysis

on:
  pull_request:
    types: [opened, edited, synchronize]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to analyze'
        required: true
        type: string

jobs:
  analyze-pr-value:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install GitHub CLI
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh -y
    
    - name: Determine PR Number
      id: pr_number
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "pr_number=${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
        else
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
        fi
    
    - name: Run PR Value Analysis
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Use the new fair scoring system
        python scripts/pr-value-analyzer-v2.py ${{ steps.pr_number.outputs.pr_number }}
    
    - name: Upload Analysis Results
      uses: actions/upload-artifact@v4
      with:
        name: pr-value-analysis
        path: |
          pr_${{ steps.pr_number.outputs.pr_number }}_value_analysis_v2.json
          .achievements/pr_${{ steps.pr_number.outputs.pr_number }}_achievement.json
    
    - name: Comment PR with Value Summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const analysisFile = `pr_${{ steps.pr_number.outputs.pr_number }}_value_analysis_v2.json`;
          
          try {
            const data = JSON.parse(fs.readFileSync(analysisFile, 'utf8'));
            
            // Build comment
            let comment = '## 📊 Automated PR Value Analysis (Fair Scoring)\n\n';
            
            // PR Type
            if (data.pr_type) {
              comment += `**PR Type Detected**: \`${data.pr_type}\`\n\n`;
            }
            
            // Business Metrics
            if (data.business_metrics && Object.keys(data.business_metrics).length > 0) {
              comment += '### 💰 Business Value\n';
              for (const [key, value] of Object.entries(data.business_metrics)) {
                comment += `- **${key.replace(/_/g, ' ')}**: ${value}\n`;
              }
              comment += '\n';
            }
            
            // Technical Metrics
            if (data.technical_metrics?.performance) {
              comment += '### 🚀 Performance Metrics\n';
              for (const [key, value] of Object.entries(data.technical_metrics.performance)) {
                comment += `- **${key.replace(/_/g, ' ')}**: ${value}\n`;
              }
              comment += '\n';
            }
            
            // KPIs
            if (data.kpis) {
              comment += '### 📈 Key Performance Indicators\n';
              const overall = data.kpis.overall_score || 0;
              comment += `- **Overall Score**: ${overall}/10 `;
              
              if (overall >= 7) {
                comment += '🌟 Excellent!\n';
              } else if (overall >= 5) {
                comment += '✅ Good\n';
              } else {
                comment += '⚠️ Needs Improvement\n';
              }
              
              // Show individual scores if available
              if (data.kpis.individual_scores) {
                comment += '\n**Score Breakdown**:\n';
                for (const [key, value] of Object.entries(data.kpis.individual_scores)) {
                  comment += `- ${key.replace(/_/g, ' ')}: ${value}/10\n`;
                }
              }
              
              // Show weights if available
              if (data.scoring_weights) {
                comment += '\n**Scoring Weights** (for ' + data.pr_type + ' PRs):\n';
                for (const [key, value] of Object.entries(data.scoring_weights)) {
                  comment += `- ${key.replace(/_/g, ' ')}: ${(value * 100).toFixed(0)}%\n`;
                }
              }
              
              comment += '\n';
            }
            
            // Achievement Tags
            if (data.achievement_tags && data.achievement_tags.length > 0) {
              comment += '### 🏷️ Achievement Tags\n';
              comment += data.achievement_tags.map(tag => `\`${tag}\``).join(' ');
              comment += '\n\n';
            }
            
            // Future Impact
            if (data.future_impact && Object.keys(data.future_impact).length > 0) {
              comment += '### 🔮 Projected Impact\n';
              for (const [key, value] of Object.entries(data.future_impact)) {
                comment += `- **${key.replace(/_/g, ' ')}**: ${value}\n`;
              }
            }
            
            comment += '\n---\n';
            comment += '*This analysis was automatically generated by the PR Value Analyzer*';
            
            // Post comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr_number.outputs.pr_number }},
              body: comment
            });
            
          } catch (error) {
            console.error('Error posting analysis comment:', error);
          }
    
    - name: Store Achievement Data
      if: success()
      run: |
        # This would typically push to a metrics database or achievement tracking system
        echo "Achievement data stored in artifacts"
    
    - name: Push to Achievement Collector
      if: success() && env.ACHIEVEMENT_COLLECTOR_URL != ''
      env:
        ACHIEVEMENT_COLLECTOR_URL: ${{ secrets.ACHIEVEMENT_COLLECTOR_URL }}
        ACHIEVEMENT_API_KEY: ${{ secrets.ACHIEVEMENT_API_KEY }}
      run: |
        # Call achievement collector API to create enriched achievement
        if [ -n "$ACHIEVEMENT_COLLECTOR_URL" ]; then
          curl -X POST \
            "${ACHIEVEMENT_COLLECTOR_URL}/pr-analysis/analyze/${{ steps.pr_number.outputs.pr_number }}" \
            -H "Authorization: Bearer ${ACHIEVEMENT_API_KEY}" \
            -H "Content-Type: application/json" \
            --fail-with-body \
            || echo "Failed to push to achievement collector (non-critical)"
        fi