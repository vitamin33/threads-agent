name: Infrastructure CI - Docker & K8s

on:
  pull_request:
    paths:
      - '**/Dockerfile*'
      - 'chart/**'
      - 'scripts/*.sh'
      - 'docker-compose*.yml'
      - '.dockerignore'
      - 'k3d-*.yaml'

concurrency:
  group: infra-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker-build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        service:
          - orchestrator
          - celery_worker
          - persona_runtime
          - viral_engine
          - fake_threads
          - threads_adaptor
          - achievement_collector
          - performance_monitor
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            buildx-${{ matrix.service }}-
            buildx-
            
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/${{ matrix.service }}/Dockerfile
          push: false
          tags: ${{ matrix.service }}:ci-${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          outputs: type=docker,dest=/tmp/${{ matrix.service }}.tar
          
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-${{ matrix.service }}
          path: /tmp/${{ matrix.service }}.tar
          retention-days: 1

  k3d-cluster-test:
    needs: docker-build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all Docker images
        uses: actions/download-artifact@v4
        with:
          pattern: docker-*
          path: /tmp/docker-images
          
      - name: Cache k3d cluster state
        id: cache-cluster
        uses: actions/cache@v4
        with:
          path: |
            ~/.k3d
            /tmp/k3d-state.tar
          key: k3d-cluster-${{ hashFiles('chart/**', 'k3d-*.yaml') }}
          restore-keys: |
            k3d-cluster-
            
      - name: Setup k3d
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
          
      - name: Restore or create k3d cluster
        run: |
          if [ -f /tmp/k3d-state.tar ]; then
            echo "ðŸ“¦ Restoring k3d cluster from cache..."
            tar -xf /tmp/k3d-state.tar -C /
            k3d cluster start ci-cluster || k3d cluster create ci-cluster --config k3d-ci.yaml
          else
            echo "ðŸš€ Creating new k3d cluster..."
            k3d cluster create ci-cluster --config k3d-ci.yaml
          fi
          
          kubectl cluster-info
          
      - name: Load Docker images into k3d
        run: |
          for image in /tmp/docker-images/docker-*/*.tar; do
            echo "Loading $(basename $image .tar)..."
            docker load -i "$image"
            IMAGE_NAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "ci-${{ github.sha }}" | head -1)
            k3d image import "$IMAGE_NAME" -c ci-cluster
          done
          
      - name: Install Helm chart
        run: |
          helm upgrade --install threads-agent ./chart \
            -f ./chart/values-ci-fast.yaml \
            --set global.image.tag="ci-${{ github.sha }}" \
            --wait --timeout 5m
            
      - name: Run smoke tests
        run: |
          # Wait for all pods to be ready
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=threads-agent --timeout=300s
          
          # Run basic health checks
          kubectl port-forward svc/orchestrator 8080:8080 &
          PF_PID=$!
          sleep 5
          
          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:8080/metrics || exit 1
          
          kill $PF_PID
          
      - name: Save cluster state
        if: success()
        run: |
          echo "ðŸ’¾ Saving k3d cluster state..."
          k3d cluster stop ci-cluster
          tar -cf /tmp/k3d-state.tar ~/.k3d /var/lib/rancher/k3s 2>/dev/null || true
          
      - name: Cleanup
        if: always()
        run: |
          k3d cluster delete ci-cluster || true

  helm-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Helm
        uses: azure/setup-helm@v3
        
      - name: Lint Helm chart
        run: |
          helm lint ./chart
          
      - name: Template validation
        run: |
          # Test with different values files
          helm template threads-agent ./chart -f ./chart/values.yaml > /dev/null
          helm template threads-agent ./chart -f ./chart/values-ci.yaml > /dev/null
          helm template threads-agent ./chart -f ./chart/values-ci-fast.yaml > /dev/null
          
      - name: Dry run install
        run: |
          helm install threads-agent ./chart --dry-run --debug