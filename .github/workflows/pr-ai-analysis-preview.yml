name: PR AI Analysis Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  ai-pr-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          pip install openai pydantic structlog
          
      - name: AI PR Analysis Preview
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 << 'EOF'
          import sys
          import json
          import os
          import asyncio
          sys.path.insert(0, '.')
          
          # Get PR data
          pr_data = {
              'pull_request': {
                  'title': '''${{ github.event.pull_request.title }}''',
                  'body': '''${{ github.event.pull_request.body }}''',
                  'additions': ${{ github.event.pull_request.additions }},
                  'deletions': ${{ github.event.pull_request.deletions }},
                  'changed_files': ${{ github.event.pull_request.changed_files }},
                  'merged': False  # Preview mode
              },
              'number': ${{ github.event.pull_request.number }}
          }
          
          print('🤖 REAL AI PR Analysis Preview')
          print('=' * 50)
          
          async def analyze_with_real_ai():
              # Check if OpenAI API key is available
              openai_key = os.getenv('OPENAI_API_KEY')
              if not openai_key or openai_key == 'test':
                  print('⚠️  OpenAI API key not available, using fallback analysis')
                  return use_fallback_analysis()
              
              try:
                  # Use the actual AI-powered PR evaluator from marketing automation
                  from services.achievement_collector.services.auto_content_pipeline import AIPoweredPREvaluator
                  
                  evaluator = AIPoweredPREvaluator()
                  
                  # Get AI evaluation
                  marketing_value = await evaluator.calculate_marketing_value(pr_data)
                  
                  analysis = {
                      'overall_score': int(marketing_value.overall_score * 10),  # Convert to 0-100
                      'business_score': int(marketing_value.business_impact_score),
                      'technical_score': int(marketing_value.technical_significance_score),
                      'positioning_score': int(marketing_value.professional_positioning_score),
                      'content_score': int(marketing_value.content_potential_score),
                      'marketing_potential': 'HIGH' if marketing_value.overall_score > 8.0 else 'MEDIUM' if marketing_value.overall_score > 6.0 else 'LOW',
                      'would_generate_content': marketing_value.overall_score > 6.0,
                      'ai_powered': True,
                      'strategy': marketing_value.marketing_strategy,
                      'recommended_platforms': marketing_value.recommended_platforms
                  }
                  
                  print(f'📊 REAL AI Analysis Results:')
                  print(f'  Overall Score: {analysis["overall_score"]}/100 (AI-powered)')
                  print(f'  Business Impact: {analysis["business_score"]}/10 (AI analysis)')
                  print(f'  Technical Depth: {analysis["technical_score"]}/10 (AI analysis)')
                  print(f'  Professional Positioning: {analysis["positioning_score"]}/10 (AI analysis)')
                  print(f'  Content Potential: {analysis["content_score"]}/10 (AI analysis)')
                  print(f'  Marketing Potential: {analysis["marketing_potential"]} (AI assessment)')
                  print(f'  Would Generate Content: {analysis["would_generate_content"]} (AI decision)')
                  
                  # AI-generated improvement suggestions
                  suggestions = []
                  if analysis['business_score'] < 6:
                      suggestions.append('AI suggests: Quantify business impact with specific metrics (cost savings, performance improvements)')
                  if analysis['technical_score'] < 6:
                      suggestions.append('AI suggests: Add more technical implementation details and architecture decisions')
                  if analysis['positioning_score'] < 7:
                      suggestions.append('AI suggests: Emphasize MLOps/AI platform engineering relevance for career positioning')
                  if analysis['content_score'] < 6:
                      suggestions.append('AI suggests: Include elements that would make compelling marketing content (metrics, achievements)')
                      
                  return analysis, suggestions
                  
              except Exception as e:
                  print(f'⚠️  AI analysis failed: {e}')
                  print('   Falling back to basic analysis...')
                  return use_fallback_analysis()
          
          def use_fallback_analysis():
              title = pr_data['pull_request']['title'].lower()
              body = pr_data['pull_request']['body'].lower()
              text = f'{title} {body}'
              
              # Basic keyword analysis (fallback only)
              business_indicators = ['$', '%', 'save', 'cost', 'revenue', 'performance', 'improve']
              business_score = min(10, sum(1 for indicator in business_indicators if indicator in text))
              
              technical_indicators = ['feat:', 'implement', 'optimization', 'mlops', 'ai', 'pipeline']
              technical_score = min(10, sum(1 for indicator in technical_indicators if indicator in text))
              
              total_changes = pr_data['pull_request']['additions'] + pr_data['pull_request']['deletions']
              size_score = min(10, total_changes // 50)
              
              overall_score = min(100, (business_score * 8) + (technical_score * 7) + (size_score * 2))
              
              analysis = {
                  'overall_score': overall_score,
                  'business_score': business_score,
                  'technical_score': technical_score, 
                  'positioning_score': technical_score,  # Estimate
                  'content_score': business_score,  # Estimate
                  'marketing_potential': "HIGH" if overall_score > 70 else "MEDIUM" if overall_score > 40 else "LOW",
                  'would_generate_content': overall_score > 50,
                  'ai_powered': False,
                  'strategy': 'Fallback analysis - OpenAI API not available',
                  'recommended_platforms': ['linkedin', 'devto']
              }
              
              suggestions = []
              if business_score < 3:
                  suggestions.append('Add business impact metrics (cost savings, performance improvements)')
              if technical_score < 3:
                  suggestions.append('Include technical implementation details and technologies used')
              
              return analysis, suggestions
          
          # Run analysis
          try:
              analysis, suggestions = asyncio.run(analyze_with_real_ai())
          except Exception as e:
              print(f'Error in AI analysis: {e}')
              analysis, suggestions = use_fallback_analysis()
          
          # Save results for comment
          with open('ai_analysis.json', 'w') as f:
              json.dump({
                  'analysis': analysis,
                  'suggestions': suggestions,
                  'pr_number': pr_data['number']
              }, f)
          EOF
          
      - name: Post AI Analysis Comment
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            try {
              const analysisData = JSON.parse(fs.readFileSync('ai_analysis.json', 'utf8'));
              const analysis = analysisData.analysis;
              const suggestions = analysisData.suggestions;
              
              // Create score bar visualization
              const scoreBar = '█'.repeat(Math.floor(analysis.overall_score / 10)) + 
                              '░'.repeat(10 - Math.floor(analysis.overall_score / 10));
              
              // Marketing potential emoji
              const potentialEmoji = analysis.marketing_potential === 'HIGH' ? '🚀' : 
                                   analysis.marketing_potential === 'MEDIUM' ? '📈' : '📊';
              
              const comment = `## 🤖 AI Marketing Analysis Preview
              
              ${potentialEmoji} **Marketing Potential: ${analysis.marketing_potential}**
              
              ### 📊 AI Scores
              \`\`\`
              Overall Score:     ${analysis.overall_score}/100 ${scoreBar}
              Business Impact:   ${analysis.business_score}/10 ${'⭐'.repeat(Math.min(analysis.business_score, 5))}
              Technical Depth:   ${analysis.technical_score}/10 ${'⭐'.repeat(Math.min(analysis.technical_score, 5))}
              Change Size:       ${analysis.size_score}/10 ${'⭐'.repeat(Math.min(analysis.size_score, 5))}
              \`\`\`
              
              ### 🎯 Content Generation
              ${analysis.would_generate_content ? 
                '✅ **Will Generate Content** - This PR will trigger automated marketing content across 6 platforms' : 
                '❌ **No Content Generation** - This PR won\'t trigger marketing automation'}
              
              ${suggestions.length > 0 ? `### 💡 Improvement Suggestions
              ${suggestions.map(s => `- ${s}`).join('\n')}
              
              *Improve these areas to increase marketing potential and job opportunity generation.*` : ''}
              
              ### 📈 Marketing Impact
              ${analysis.would_generate_content ? 
                'This PR will automatically generate professional content for LinkedIn, Dev.to, Medium, GitHub, Twitter, and Threads with serbyn.pro CTAs for lead generation.' :
                'Consider highlighting technical achievements and business impact to enable automated marketing content generation.'}
              
              ---
              *Powered by AI Marketing Automation System | Score updates on each commit*`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
            } catch (error) {
              console.error('Error posting AI analysis comment:', error);
            }