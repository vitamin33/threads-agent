name: Auto-Fix CI Failures

on:
  workflow_run:
    workflows: ["Dev CI"]
    types:
      - completed
    branches:
      - '**'
      - '!main'

permissions:
  contents: write
  pull-requests: write
  actions: read
  checks: read

jobs:
  analyze-and-fix:
    if: ${{ github.event.workflow_run.conclusion == 'failure' && github.event.workflow_run.event == 'pull_request' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Get PR Information
        id: pr-info
        uses: actions/github-script@v7
        with:
          script: |
            // Get the workflow run details
            const workflowRun = context.payload.workflow_run;
            
            // Get associated PR
            const pullRequests = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: workflowRun.head_sha
            });
            
            if (pullRequests.data.length === 0) {
              core.setFailed('No PR found for this workflow run');
              return;
            }
            
            const pr = pullRequests.data[0];
            core.setOutput('pr_number', pr.number);
            core.setOutput('pr_branch', pr.head.ref);
            core.setOutput('pr_sha', workflowRun.head_sha);
            
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr-info.outputs.pr_branch }}
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Download Failed Workflow Logs
        id: download-logs
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Get failed jobs
            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id
            });
            
            const failedJobs = jobs.data.jobs.filter(job => job.conclusion === 'failure');
            
            if (failedJobs.length === 0) {
              core.setFailed('No failed jobs found');
              return;
            }
            
            // Download logs for failed jobs
            let allLogs = '';
            for (const job of failedJobs) {
              try {
                const logs = await github.rest.actions.downloadJobLogsForWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  job_id: job.id
                });
                
                allLogs += `\n\n=== Job: ${job.name} ===\n`;
                allLogs += logs.data;
              } catch (error) {
                console.error(`Failed to download logs for job ${job.name}: ${error.message}`);
              }
            }
            
            // Save logs to file
            fs.writeFileSync('ci-failure-logs.txt', allLogs);
            
            // Extract key error information
            const errorPatterns = [
              /error: .+/gi,
              /failed: .+/gi,
              /FAILED .+/g,
              /AssertionError: .+/g,
              /TypeError: .+/g,
              /ModuleNotFoundError: .+/g,
              /ImportError: .+/g,
              /SyntaxError: .+/g,
              /pytest .+ FAILED/g,
              /mypy: .+ error/g,
              /ruff: .+ error/g
            ];
            
            const errors = [];
            for (const pattern of errorPatterns) {
              const matches = allLogs.match(pattern) || [];
              errors.push(...matches);
            }
            
            const uniqueErrors = [...new Set(errors)];
            core.setOutput('error_summary', uniqueErrors.slice(0, 10).join('\n'));
            
      - name: Setup Claude Code
        run: |
          # Install Claude Code CLI (assuming it's available via npm or similar)
          # This is a placeholder - adjust based on actual Claude Code installation method
          npm install -g @anthropic/claude-code-cli || true
          
      - name: Analyze and Fix CI Failure
        id: claude-fix
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Create a fix request for Claude Code
          cat > fix-request.md << 'EOF'
          The CI pipeline has failed. Please analyze the errors and fix them.
          
          Error Summary:
          ${{ steps.download-logs.outputs.error_summary }}
          
          Full logs are available in ci-failure-logs.txt
          
          Please:
          1. Analyze the CI failure logs
          2. Identify the root cause of the failures
          3. Make the necessary code changes to fix the issues
          4. Ensure the fix is minimal and targeted
          5. Do not modify unrelated code
          
          Focus on these types of common CI failures:
          - Test failures (unit or e2e)
          - Linting errors (ruff, black, isort)
          - Type checking errors (mypy)
          - Import errors
          - Syntax errors
          - Configuration issues
          
          After making fixes, provide a summary of what was changed and why.
          EOF
          
          # Run Claude Code to analyze and fix
          # This is a placeholder command - adjust based on actual Claude Code CLI
          claude-code fix \
            --context "$(cat fix-request.md)" \
            --file ci-failure-logs.txt \
            --output fix-summary.md \
            --auto-commit false \
            || echo "Claude Code analysis completed with warnings"
            
          # Check if any files were modified
          if [[ -n $(git status --porcelain) ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # Generate fix summary
            git diff --name-only > changed-files.txt
            echo "changed_files=$(cat changed-files.txt | tr '\n' ' ')" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Run Quick Validation
        if: steps.claude-fix.outputs.has_changes == 'true'
        id: validate
        run: |
          # Run quick checks to validate the fix
          echo "Running quick validation checks..."
          
          # Run linting on changed files
          if command -v ruff &> /dev/null; then
            ruff check ${{ steps.claude-fix.outputs.changed_files }} || true
          fi
          
          # Run mypy on changed Python files
          changed_py_files=$(echo "${{ steps.claude-fix.outputs.changed_files }}" | tr ' ' '\n' | grep '\.py$' | tr '\n' ' ')
          if [[ -n "$changed_py_files" ]] && command -v mypy &> /dev/null; then
            mypy $changed_py_files || true
          fi
          
          # Run affected unit tests if possible
          # This is a simplified check - adjust based on your test structure
          if [[ -f "pyproject.toml" ]] || [[ -f "setup.py" ]]; then
            pytest -xvs -m "not e2e" --tb=short || echo "validation_passed=false" >> $GITHUB_OUTPUT
          fi
          
          echo "validation_passed=true" >> $GITHUB_OUTPUT
          
      - name: Create Fix Commit
        if: steps.claude-fix.outputs.has_changes == 'true'
        run: |
          # Configure git
          git config user.name "Claude Code Bot"
          git config user.email "claude-code[bot]@users.noreply.github.com"
          
          # Stage changes
          git add -A
          
          # Create commit message
          cat > commit-message.txt << 'EOF'
          fix: Auto-fix CI failures
          
          This commit was automatically generated by Claude Code to fix CI failures.
          
          Changed files:
          ${{ steps.claude-fix.outputs.changed_files }}
          
          Error summary that was fixed:
          ${{ steps.download-logs.outputs.error_summary }}
          
          Co-authored-by: Claude Code <claude-code[bot]@users.noreply.github.com>
          EOF
          
          # Commit changes
          git commit -F commit-message.txt
          
      - name: Push Fix
        if: steps.claude-fix.outputs.has_changes == 'true'
        run: |
          git push origin ${{ steps.pr-info.outputs.pr_branch }}
          
      - name: Comment on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr-info.outputs.pr_number }};
            const hasChanges = '${{ steps.claude-fix.outputs.has_changes }}' === 'true';
            const validationPassed = '${{ steps.validate.outputs.validation_passed }}' === 'true';
            
            let comment = '## ü§ñ Claude Code CI Auto-Fix\n\n';
            
            if (hasChanges) {
              comment += '‚úÖ **CI failures detected and fixed automatically!**\n\n';
              comment += '### Changes Made:\n';
              comment += '```\n${{ steps.claude-fix.outputs.changed_files }}\n```\n\n';
              
              if (validationPassed) {
                comment += '‚úÖ Quick validation passed. The CI should now pass.\n\n';
              } else {
                comment += '‚ö†Ô∏è Quick validation had some issues. Please review the changes.\n\n';
              }
              
              comment += '### Original Errors Fixed:\n';
              comment += '```\n${{ steps.download-logs.outputs.error_summary }}\n```\n\n';
              comment += 'Please review the automated fixes and re-run CI to confirm.\n';
            } else {
              comment += '‚ùå **No automated fix could be applied.**\n\n';
              comment += 'The CI failures require manual intervention. Error summary:\n';
              comment += '```\n${{ steps.download-logs.outputs.error_summary }}\n```\n';
            }
            
            comment += '\n---\n';
            comment += '_This is an automated message from Claude Code CI Auto-Fix bot._';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });
            
      - name: Monitor Fix Result
        if: steps.claude-fix.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Wait for new CI run to start
            await new Promise(resolve => setTimeout(resolve, 10000)); // 10 seconds
            
            // Get the latest workflow runs
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'dev-ci.yml',
              branch: '${{ steps.pr-info.outputs.pr_branch }}',
              per_page: 5
            });
            
            // Find the run triggered by our commit
            const ourRun = runs.data.workflow_runs.find(run => 
              run.head_sha !== '${{ steps.pr-info.outputs.pr_sha }}' &&
              new Date(run.created_at) > new Date(Date.now() - 60000) // Created in last minute
            );
            
            if (ourRun) {
              core.notice(`New CI run started: ${ourRun.html_url}`);
              core.setOutput('new_run_id', ourRun.id);
              core.setOutput('new_run_url', ourRun.html_url);
            } else {
              core.warning('Could not find new CI run after fix commit');
            }