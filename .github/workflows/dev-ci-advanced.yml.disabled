# Advanced CI Optimizations
name: dev-ci-advanced

on:
  pull_request:
    branches: [main]

jobs:
  # 1. Test Impact Analysis
  analyze:
    runs-on: ubuntu-22.04
    outputs:
      affected-tests: ${{ steps.impact.outputs.tests }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Analyze test impact
        id: impact
        run: |
          # Get changed Python files
          CHANGED=$(git diff --name-only origin/main...HEAD | grep '\.py$' || true)
          
          # Map to test files (simple version)
          TESTS=""
          for file in $CHANGED; do
            # Find corresponding test file
            test_file=${file/services/tests}
            test_file=${test_file/.py/_test.py}
            if [ -f "$test_file" ]; then
              TESTS="$TESTS $test_file"
            fi
          done
          
          echo "tests=$TESTS" >> $GITHUB_OUTPUT

  # 2. Matrix Test Splitting
  test:
    needs: analyze
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        group: [1, 2, 3, 4]  # Split across 4 runners
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python with aggressive caching
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt
            **/pyproject.toml
            **/setup.cfg
      
      - name: Install test dependencies
        run: |
          # Install all service dependencies
          pip install -r services/orchestrator/requirements.txt
          pip install -r services/celery_worker/requirements.txt
          pip install -r services/persona_runtime/requirements.txt
          pip install -r services/fake_threads/requirements.txt
          pip install -r services/viral_engine/requirements.txt
          pip install -r services/threads_adaptor/requirements.txt
          pip install -r tests/requirements.txt
          # Install additional test tools
          pip install pytest pytest-xdist pytest-split
      
      - name: Run tests (split by timing)
        run: |
          # Use historical test durations to balance groups
          pytest --splits 4 --group ${{ matrix.group }} \
                 --durations-path .test_durations \
                 --store-durations \
                 -n auto

  # 3. Smart Docker Builds with Layer Caching
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build with advanced caching
        uses: docker/build-push-action@v5
        with:
          context: .
          file: services/orchestrator/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/orchestrator:pr-${{ github.event.pull_request.number }}
          cache-from: |
            type=registry,ref=ghcr.io/${{ github.repository }}/orchestrator:cache
            type=registry,ref=ghcr.io/${{ github.repository }}/orchestrator:main
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/orchestrator:cache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # 4. Incremental Type Checking
  typecheck:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Cache mypy
        uses: actions/cache@v4
        with:
          path: |
            .mypy_cache
            .dmypy.json
          key: mypy-${{ runner.os }}-${{ hashFiles('**/*.py') }}
      
      - name: Run dmypy daemon
        run: |
          pip install mypy
          # Start daemon for faster checking
          dmypy start -- --config-file mypy.ini
          dmypy check .