# .github/workflows/docker-ci.yml
# Only runs when Docker-related files change
name: docker-ci

on:
  pull_request:
    paths:
      - 'services/**/Dockerfile'
      - 'services/**/requirements.txt'
      - 'services/**/*.py'
      - 'docker-compose*.yml'
      - '.github/workflows/docker-ci.yml'

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      pull-requests: read
    outputs:
      services: ${{ steps.changes.outputs.services }}
      any_changed: ${{ steps.changes.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v4

      - name: Detect service changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            orchestrator:
              - 'services/orchestrator/**'
            celery_worker:
              - 'services/celery_worker/**'
            persona_runtime:
              - 'services/persona_runtime/**'
            fake_threads:
              - 'services/fake_threads/**'
            viral_engine:
              - 'services/viral_engine/**'

      - name: Set outputs
        id: set-matrix
        run: |
          services=()
          if [ "${{ steps.changes.outputs.orchestrator }}" == "true" ]; then services+=("orchestrator"); fi
          if [ "${{ steps.changes.outputs.celery_worker }}" == "true" ]; then services+=("celery_worker"); fi
          if [ "${{ steps.changes.outputs.persona_runtime }}" == "true" ]; then services+=("persona_runtime"); fi
          if [ "${{ steps.changes.outputs.fake_threads }}" == "true" ]; then services+=("fake_threads"); fi
          if [ "${{ steps.changes.outputs.viral_engine }}" == "true" ]; then services+=("viral_engine"); fi

          if [ ${#services[@]} -eq 0 ]; then
            echo "services=[]" >> $GITHUB_OUTPUT
            echo "any_changed=false" >> $GITHUB_OUTPUT
          else
            # Create compact JSON array
            json=$(printf '%s\n' "${services[@]}" | jq -R . | jq -s -c .)
            echo "services=$json" >> $GITHUB_OUTPUT
            echo "any_changed=true" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build ${{ matrix.service }}
    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: services/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=ghcr.io/${{ github.repository }}/${{ matrix.service }}:buildcache
            type=registry,ref=ghcr.io/${{ github.repository }}/${{ matrix.service }}:main
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/${{ matrix.service }}:buildcache,mode=max

      - name: Output image info
        run: |
          echo "Built image: ${{ steps.meta.outputs.tags }}"
          echo "Cache used: ghcr.io/${{ github.repository }}/${{ matrix.service }}:buildcache"

  docker-summary:
    name: Docker CI Summary
    needs: [detect-changes, build]
    runs-on: ubuntu-22.04
    if: always()
    steps:
      - name: Summary
        run: |
          if [ "${{ needs.detect-changes.outputs.any_changed }}" == "false" ]; then
            echo "✅ No Docker changes detected - skipping builds"
          elif [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ All Docker images built successfully"
          elif [ "${{ needs.build.result }}" == "skipped" ]; then
            echo "✅ No Docker changes detected - builds were skipped"
          else
            echo "❌ Docker build failed"
            exit 1
          fi
