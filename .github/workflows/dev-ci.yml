# .github/workflows/dev-ci.yml
name: dev-ci

on:
  pull_request:
    branches: [main]
#   #dev branches keep feedback loop tight
#   push:
#     branches: [cra-*]

jobs:
  test:
    name: py${{ matrix.python }} • k3d
    runs-on: ubuntu-22.04
    timeout-minutes: 15 # fail-fast guard
    strategy:
      fail-fast: false # let both versions run
      matrix:
        python: ["3.12"]

    steps:
      # ————————————————————————————————
      # 0.  Checkout code
      # ————————————————————————————————
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # for proper cache keys

      # ————————————————————————————————
      # 1.  BuildKit + cache
      # ————————————————————————————————
      - name: Set up BuildX
        id: buildx #  ← we’ll need the builder name later
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          buildkitd-flags: --debug

      - name: Prepare buildx cache
        id: buildx-cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # ————————————————————————————————
      # 2.  Spin local k3d cluster ⬅️ must be *before* image import
      # ————————————————————————————————
      - name: Create k3d cluster
        uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: dev # => kubectl context "k3d-dev"
          # args: --wait                    # uncomment if you want hard blocking

      # ————————————————————————————————
      # 3.  Build & load images (cache-aware)
      # ————————————————————————————————
      - name: Build & load images
        run: |
          CACHE_OPTS="--cache-from=type=local,src=/tmp/.buildx-cache \
                      --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max"

          BUILDER="${{ steps.buildx.outputs.name }}"   # <— builder set above

          for svc in orchestrator celery_worker persona_runtime fake_threads; do
            docker buildx build \
              --builder "$BUILDER" \
              --load \
              $CACHE_OPTS \
              -f services/${svc}/Dockerfile \
              -t ${svc//_/-}:local .
          done

          docker pull bitnami/postgresql:16
          docker pull rabbitmq:3.13-management-alpine
          docker pull qdrant/qdrant:v1.9.4

          k3d image import \
            orchestrator:local \
            celery-worker:local \
            persona-runtime:local \
            fake-threads:local \
            qdrant/qdrant:v1.9.4 \
            -c dev

      - name: Save buildx cache
        if: steps.buildx-cache.outputs.cache-hit != 'true'
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # ————————————————————————————————
      # 4.  Helm install with CI values
      # ————————————————————————————————
      - name: Helm upgrade (dev cluster)
        id: helm
        continue-on-error: true
        run: |
          helm upgrade --install threads ./chart \
            -f chart/values-ci.yaml \
            --wait --timeout 300s --debug

      # ─── If Helm failed, dump cluster state ──────────────────────────────
      - name: Dump pod list + events if Helm failed
        if: steps.helm.outcome == 'failure'
        run: |
          echo "❌ Helm release did not become ready. Dumping diagnostics …"
          kubectl get pods -A -o wide
          kubectl get events --sort-by='.lastTimestamp' -A | tail -n 40
          # Show logs of pods stuck in Pending / CrashLoop
          for p in $(kubectl get pods --no-headers | awk '$3!="Running"{print $1}'); do
            echo "──── logs: $p ────"
            kubectl logs "$p" --tail=100 || true
          done
          # Fail the step explicitly so the job still turns red
          exit 1

      - name: Wait for orchestrator pod
        run: |
          kubectl rollout status deploy/orchestrator --timeout=120s

      # ————————————————————————————————
      # 4.  Set-up Python & cache venv
      # ————————————————————————————————
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r services/orchestrator/requirements.txt
          pip install -r services/celery_worker/requirements.txt
          pip install -r services/persona_runtime/requirements.txt
          pip install -r services/fake_threads/requirements.txt
          pip install -r tests/requirements.txt

      # ————————————————————————————————
      # 5.  Run unit + e2e suites
      # ————————————————————————————————
      - name: pytest (unit + e2e)
        run: |
          export PYTHONPATH=$PWD:$PYTHONPATH
          pytest -q

      # ————————————————————————————————
      # 6.  Render Mermaid diagram
      # ————————————————————————————————
      - name: Render infra diagram
        run: |
          npm install -g @mermaid-js/mermaid-cli@^10
          mmdc -i docs/infra.mmd -o docs/infra.svg

      # ————————————————————————————————
      # 7.  Upload infra.svg artifact
      # ————————————————————————————————
      - name: Upload infra diagram
        uses: actions/upload-artifact@v4
        with:
          name: infra-svg
          path: docs/infra.svg
