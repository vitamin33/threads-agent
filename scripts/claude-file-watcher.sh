#!/usr/bin/env bash
# ================================================================
#  CLAUDE FILE WATCHER - Monitor changes and auto-commit
# ================================================================

set -euo pipefail

# Configuration
readonly WATCH_DIR="${1:-.}"
readonly SESSION_TIMEOUT=300  # 5 minutes of inactivity before auto-commit
readonly IGNORE_PATTERNS=(".git" "node_modules" ".DS_Store" "*.log" ".claude-sessions")

# File to track when Claude was last active
readonly ACTIVITY_FILE=".claude-sessions/last_activity"
readonly PID_FILE=".claude-sessions/watcher.pid"

# Colors
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly YELLOW='\033[0;33m'
readonly RED='\033[0;31m'
readonly NC='\033[0m'

log_info() { echo -e "${BLUE}[WATCHER]${NC} $*"; }
log_success() { echo -e "${GREEN}[WATCHER]${NC} $*"; }
log_warning() { echo -e "${YELLOW}[WATCHER]${NC} $*"; }
log_error() { echo -e "${RED}[WATCHER]${NC} $*"; }

# Function to check if file should be ignored
should_ignore() {
    local file="$1"
    for pattern in "${IGNORE_PATTERNS[@]}"; do
        if [[ "$file" == *"$pattern"* ]]; then
            return 0
        fi
    done
    return 1
}

# Function to update activity timestamp
update_activity() {
    mkdir -p "$(dirname "$ACTIVITY_FILE")"
    date +%s > "$ACTIVITY_FILE"
}

# Function to get last activity time
get_last_activity() {
    if [[ -f "$ACTIVITY_FILE" ]]; then
        cat "$ACTIVITY_FILE"
    else
        echo "0"
    fi
}

# Function to check if session has timed out
session_timeout() {
    local current_time=$(date +%s)
    local last_activity=$(get_last_activity)
    local diff=$((current_time - last_activity))

    if (( diff > SESSION_TIMEOUT )); then
        return 0  # Timed out
    else
        return 1  # Still active
    fi
}

# Function to commit changes
commit_changes() {
    local reason="${1:-Auto-commit after inactivity}"

    # Check if there are any changes
    if git diff --quiet && git diff --cached --quiet; then
        log_info "No changes to commit"
        return 0
    fi

    # Get list of modified files
    local modified_files=$(git diff --name-only)
    local staged_files=$(git diff --cached --name-only)
    local all_files=$(echo -e "$modified_files\n$staged_files" | sort -u | grep -v '^$')

    # Stage all changes
    git add -A

    # Create commit message
    local commit_msg="Claude Code Auto-Commit: $(date '+%Y-%m-%d %H:%M:%S')

$reason

Modified files:
$(echo "$all_files" | sed 's/^/- /' | head -20)
$(if [[ $(echo "$all_files" | wc -l) -gt 20 ]]; then echo "... and $(($(echo "$all_files" | wc -l) - 20)) more files"; fi)

ðŸ¤– Auto-generated by Claude File Watcher"

    # Commit
    if git commit -m "$commit_msg"; then
        log_success "Auto-committed changes: $(echo "$all_files" | wc -l) files"

        # Optionally push (uncomment if desired)
        # git push origin HEAD 2>/dev/null || log_warning "Could not push changes"
    else
        log_error "Failed to commit changes"
    fi
}

# Function to start watching
start_watcher() {
    log_info "Starting Claude Code file watcher..."
    log_info "Watching directory: $WATCH_DIR"
    log_info "Session timeout: $SESSION_TIMEOUT seconds"

    # Save PID
    mkdir -p "$(dirname "$PID_FILE")"
    echo $$ > "$PID_FILE"

    # Initialize activity
    update_activity

    # Start file system event monitoring
    if command -v fswatch >/dev/null 2>&1; then
        start_fswatch_monitoring
    elif command -v inotifywait >/dev/null 2>&1; then
        start_inotify_monitoring
    else
        start_polling_monitoring
    fi
}

# Use fswatch (macOS)
start_fswatch_monitoring() {
    log_info "Using fswatch for file monitoring"

    fswatch -0 -r --event=Created --event=Updated --event=Removed "$WATCH_DIR" | while read -d "" file; do
        if ! should_ignore "$file"; then
            log_info "File changed: $(basename "$file")"
            update_activity

            # Track the change
            ./scripts/claude-session-tracker.sh track-file "$file" "modified" 2>/dev/null || true
        fi
    done &

    # Monitor for session timeout
    while true; do
        sleep 30
        if session_timeout; then
            commit_changes "Session timeout - auto-committing pending changes"
            update_activity  # Reset timer after commit
        fi
    done
}

# Use inotifywait (Linux)
start_inotify_monitoring() {
    log_info "Using inotifywait for file monitoring"

    inotifywait -m -r -e create,modify,delete --format '%w%f' "$WATCH_DIR" | while read file; do
        if ! should_ignore "$file"; then
            log_info "File changed: $(basename "$file")"
            update_activity

            # Track the change
            ./scripts/claude-session-tracker.sh track-file "$file" "modified" 2>/dev/null || true
        fi
    done &

    # Monitor for session timeout
    while true; do
        sleep 30
        if session_timeout; then
            commit_changes "Session timeout - auto-committing pending changes"
            update_activity  # Reset timer after commit
        fi
    done
}

# Fallback polling method
start_polling_monitoring() {
    log_warning "Using polling method (install fswatch or inotifywait for better performance)"

    local last_check=$(date +%s)

    while true; do
        # Find files modified in the last minute
        local modified_files=$(find "$WATCH_DIR" -type f -newermt "@$last_check" 2>/dev/null | head -100)

        if [[ -n "$modified_files" ]]; then
            while read -r file; do
                if ! should_ignore "$file"; then
                    log_info "File changed: $(basename "$file")"
                    update_activity

                    # Track the change
                    ./scripts/claude-session-tracker.sh track-file "$file" "modified" 2>/dev/null || true
                fi
            done <<< "$modified_files"
        fi

        # Check for timeout
        if session_timeout; then
            commit_changes "Session timeout - auto-committing pending changes"
            update_activity
        fi

        last_check=$(date +%s)
        sleep 10
    done
}

# Function to stop watcher
stop_watcher() {
    if [[ -f "$PID_FILE" ]]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            log_info "Stopping file watcher (PID: $pid)"
            kill "$pid" 2>/dev/null || true

            # Commit any pending changes
            commit_changes "Watcher stopped - final auto-commit"
        fi
        rm -f "$PID_FILE"
    else
        log_warning "No watcher PID file found"
    fi
}

# Function to check watcher status
watcher_status() {
    if [[ -f "$PID_FILE" ]]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            log_success "File watcher is running (PID: $pid)"
            local last_activity=$(get_last_activity)
            local current_time=$(date +%s)
            local time_diff=$((current_time - last_activity))
            echo "Last activity: $time_diff seconds ago"
            return 0
        else
            log_warning "Stale PID file found, removing..."
            rm -f "$PID_FILE"
        fi
    fi

    log_info "File watcher is not running"
    return 1
}

# Cleanup function
cleanup() {
    log_info "Received termination signal, cleaning up..."
    commit_changes "Watcher terminated - final auto-commit"
    rm -f "$PID_FILE"
    exit 0
}

# Set up signal handlers
trap cleanup SIGTERM SIGINT

# Main command handler
case "${1:-help}" in
    "start")
        if watcher_status >/dev/null 2>&1; then
            log_warning "File watcher is already running"
            exit 1
        fi
        start_watcher
        ;;
    "stop")
        stop_watcher
        ;;
    "status")
        watcher_status
        ;;
    "restart")
        stop_watcher
        sleep 2
        start_watcher
        ;;
    "commit")
        commit_changes "${2:-Manual commit via watcher}"
        ;;
    "help"|*)
        echo "Claude File Watcher - Auto-commit file changes"
        echo ""
        echo "Usage:"
        echo "  $0 start    - Start file watcher"
        echo "  $0 stop     - Stop file watcher"
        echo "  $0 status   - Check watcher status"
        echo "  $0 restart  - Restart file watcher"
        echo "  $0 commit   - Manually commit changes"
        echo ""
        echo "Configuration:"
        echo "  WATCH_DIR: $WATCH_DIR"
        echo "  TIMEOUT: $SESSION_TIMEOUT seconds"
        ;;
esac
