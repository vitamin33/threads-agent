#!/usr/bin/env python3
"""
AI Agent Development System CLI
Main entry point for the development system - replaces multiple legacy scripts
"""

import sys
import os
import argparse
import yaml
from pathlib import Path
from datetime import datetime

# Add dev-system to path
DEV_SYSTEM_ROOT = Path(__file__).parent.parent
sys.path.insert(0, str(DEV_SYSTEM_ROOT))

def load_config():
    """Load development system configuration"""
    config_path = DEV_SYSTEM_ROOT / "config" / "dev-system.yaml"
    if config_path.exists():
        with open(config_path) as f:
            return yaml.safe_load(f)
    return {}

def init_system(args):
    """Initialize the development system"""
    print("🚀 Initializing AI Agent Development System...")
    
    # Create data directories
    data_dir = DEV_SYSTEM_ROOT / "data"
    data_dir.mkdir(exist_ok=True)
    
    # Initialize telemetry database
    if args.telemetry:
        try:
            from ops.telemetry import init_telemetry_db
            init_telemetry_db()
            print("✅ Telemetry system initialized")
            print("🔄 Test with: just metrics-today")
            print("📝 Generate sample data: python .dev-system/ops/example_integration.py")
        except Exception as e:
            print(f"❌ Telemetry initialization failed: {e}")
            return
    
    # Initialize evaluation system  
    if args.evals:
        evals_dir = DEV_SYSTEM_ROOT / "evals" / "suites"
        evals_dir.mkdir(parents=True, exist_ok=True)
        print("✅ Evaluation system initialized")
        
    # Initialize prompt registry
    if args.prompts:
        prompts_dir = DEV_SYSTEM_ROOT / "prompts" / "registry" 
        prompts_dir.mkdir(parents=True, exist_ok=True)
        print("✅ Prompt registry initialized")
        
    print("✅ Development system ready!")

def brief_command(args):
    """Generate morning brief"""
    try:
        from planner.brief import generate_morning_brief
        brief = generate_morning_brief()
        print(brief)
    except ImportError:
        print("📋 Morning brief system not yet implemented")
        print("🔄 Run: .dev-system/cli/dev-system init --planning")
    except Exception as e:
        print(f"❌ Error generating brief: {e}")
        print("🔄 Try: .dev-system/cli/dev-system init --planning")

def debrief_command(args):
    """Generate evening debrief"""
    try:
        from planner.debrief import generate_evening_debrief
        debrief = generate_evening_debrief()
        print(debrief)
    except ImportError:
        print("🌙 Evening debrief system not yet implemented")
        print("🔄 Run: .dev-system/cli/dev-system init --planning")
    except Exception as e:
        print(f"❌ Error generating debrief: {e}")
        print("🔄 Try: .dev-system/cli/dev-system init --planning")
        
def metrics_command(args):
    """Show metrics for specified period"""
    try:
        from ops.telemetry import show_metrics
        print(show_metrics(period=args.period))
    except ImportError:
        print("📊 Telemetry system not yet implemented")
        print("🔄 Run: .dev-system/cli/dev-system init --telemetry")
    except Exception as e:
        print(f"❌ Error loading metrics: {e}")
        print("🔄 Try initializing: .dev-system/cli/dev-system init --telemetry")

def eval_command(args):
    """Run evaluations"""
    try:
        from evals.run import run_evaluation_suite
        result = run_evaluation_suite(args.suite)
        
        # Print summary
        print(f"\n📋 Suite: {result.suite_name}")
        print(f"🎯 Score: {result.weighted_score:.2f}")
        print(f"⚡ Status: {result.gate_status}")
        
        return result.gate_status == "PASS"
        
    except ImportError:
        print("🧪 Evaluation system not yet implemented") 
        print("🔄 Run: .dev-system/cli/dev-system init --evals")
        return False
    except Exception as e:
        print(f"❌ Evaluation failed: {e}")
        return False

def worktree_command(args):
    """Setup or manage worktrees"""
    try:
        from agents.worktree import setup_worktree
        setup_worktree(args.name, args.focus)
    except ImportError:
        print("🌳 Worktree system not yet implemented")
        print("🔄 Using legacy script: scripts/setup-4-agents.sh")
        os.system("scripts/setup-4-agents.sh")

def release_command(args):
    """Manage releases and deployments"""
    try:
        from ops.release import ReleaseManager, deploy_with_strategy
        
        if args.history:
            # Show release history
            manager = ReleaseManager()
            history = manager.get_release_history()
            
            print("📋 Recent Release History:")
            for release in history[-5:]:
                status_emoji = {
                    'deployed': '✅',
                    'rolled_back': '🔄', 
                    'failed': '❌',
                    'canary': '🐦',
                    'staging': '🏗️'
                }.get(release['result']['status'], '❓')
                
                duration = release['duration_seconds']
                timestamp = datetime.fromtimestamp(release['start_time']).strftime('%m/%d %H:%M')
                print(f"  {status_emoji} {timestamp}: {release['strategy']} -> {release['result']['status']} ({duration:.1f}s)")
            
            rollback_rate = manager.get_rollback_rate(7)
            print(f"\n📊 7-day rollback rate: {rollback_rate:.1%}")
            return True
        
        # Perform deployment
        result = deploy_with_strategy(args.strategy, percentage=args.percentage, environment=args.environment)
        
        # Print summary
        print(f"\n📋 Release Status: {result['status']}")
        print(f"💬 {result['message']}")
        
        if 'next_action' in result:
            print(f"🎯 Next: {result['next_action']}")
            
        return result['status'] not in ['failed', 'rolled_back']
        
    except ImportError:
        print("🚀 Release system not yet implemented")
        print("🔄 Run: .dev-system/cli/dev-system init --release")
        return False
    except Exception as e:
        print(f"❌ Release failed: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(
        description="AI Agent Development System CLI",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s init                    # Initialize the system
  %(prog)s brief                   # Get morning priorities  
  %(prog)s metrics --period 1d     # Show yesterday's metrics
  %(prog)s eval --suite core       # Run core evaluation suite
  %(prog)s worktree --name a1-mlops --focus infrastructure
  %(prog)s release --strategy canary --percentage 10
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Init command
    init_parser = subparsers.add_parser('init', help='Initialize development system')
    init_parser.add_argument('--telemetry', action='store_true', help='Initialize telemetry')
    init_parser.add_argument('--evals', action='store_true', help='Initialize evaluations')
    init_parser.add_argument('--prompts', action='store_true', help='Initialize prompt registry')
    
    # Brief command
    brief_parser = subparsers.add_parser('brief', help='Generate morning brief')
    
    # Debrief command
    debrief_parser = subparsers.add_parser('debrief', help='Generate evening debrief')
    
    # Metrics command
    metrics_parser = subparsers.add_parser('metrics', help='Show metrics')
    metrics_parser.add_argument('--period', default='1d', help='Time period (1d, 7d, 30d)')
    
    # Eval command
    eval_parser = subparsers.add_parser('eval', help='Run evaluations')
    eval_parser.add_argument('--suite', default='core', help='Evaluation suite name')
    
    # Worktree command
    worktree_parser = subparsers.add_parser('worktree', help='Setup worktree')
    worktree_parser.add_argument('--name', required=True, help='Worktree name')
    worktree_parser.add_argument('--focus', help='Development focus area')
    
    # Release command
    release_parser = subparsers.add_parser('release', help='Manage releases')  
    release_parser.add_argument('--strategy', default='canary', help='Release strategy')
    release_parser.add_argument('--percentage', type=int, default=10, help='Canary percentage')
    release_parser.add_argument('--environment', default='dev', help='Target environment')
    release_parser.add_argument('--history', action='store_true', help='Show release history')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
        
    # Route to appropriate command
    if args.command == 'init':
        init_system(args)
    elif args.command == 'brief':
        brief_command(args)
    elif args.command == 'debrief':
        debrief_command(args)
    elif args.command == 'metrics':
        metrics_command(args)
    elif args.command == 'eval':
        eval_command(args)
    elif args.command == 'worktree':
        worktree_command(args)
    elif args.command == 'release':
        release_command(args)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()