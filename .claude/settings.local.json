{
  "permissions": {
    "allow": [
      "mcp__linear__linear_searchIssues",
      "mcp__linear__linear_getIssues",
      "Bash(find:*)",
      "mcp__linear__linear_getViewer",
      "mcp__linear__linear_getTeams",
      "Bash(kubectl get:*)",
      "Bash(helm list:*)",
      "mcp__filesystem__read_multiple_files",
      "mcp__filesystem__read_file",
      "mcp__linear__linear_getIssueById",
      "Bash(mkdir:*)",
      "Bash(python -m pytest services/threads_adaptor/tests/unit/test_limiter.py -v)",
      "Bash(python3 -m pytest services/threads_adaptor/tests/unit/test_limiter.py -v)",
      "Bash(ls:*)",
      "Bash(python -m pytest services/threads_adaptor/tests/unit/test_limiter.py::TestTokenBucketLimiter::test_acquire_nowait_failure -xvs)",
      "Bash(python -m pytest services/threads_adaptor/tests/unit/test_limiter.py::TestHighVolumeRateLimiting::test_25_calls_inserts_pauses -xvs)",
      "Bash(python3:*)",
      "Bash(timeout 10s python -m pytest:*)",
      "Bash(python -m pytest services/threads_adaptor/tests/unit/test_limiter.py::TestHighVolumeRateLimiting::test_25_calls_inserts_pauses -xvs --timeout=10)",
      "Bash(python -m pytest services/threads_adaptor/tests/unit/test_limiter.py::TestHighVolumeRateLimiting::test_burst_then_steady_rate -xvs)",
      "Bash(mypy:*)",
      "Bash(just ship:*)",
      "Bash(python -m pytest services/threads_adaptor/tests/unit/test_limiter.py::TestTokenBucketLimiter::test_token_refill -xvs)",
      "mcp__filesystem__search_files",
      "Bash(curl:*)",
      "Bash(pkill:*)",
      "Bash(true)",
      "Bash(kubectl logs:*)",
      "Bash(chmod:*)",
      "Bash(./scripts/quality-gates.sh:*)",
      "Bash(PYTHONPATH=$PWD:$PYTHONPATH pytest -s -m e2e tests/e2e/test_post_flow.py::test_draft_post_happy_path)",
      "Bash(just lint)",
      "Bash(pip install:*)",
      "Bash(PYTHONPATH=$PWD:$PYTHONPATH pytest -s -m e2e)",
      "Bash(PYTHONPATH=$PWD:$PYTHONPATH pytest -q)",
      "Bash(source:*)",
      "Bash(isort:*)",
      "Bash(just pre-commit-check:*)",
      "Bash(ruff format:*)",
      "Bash(just pre-commit-fix:*)",
      "Bash(./scripts/learning-system.sh:*)",
      "Bash(just analyze-patterns:*)",
      "Bash(just benchmark-performance:*)",
      "Bash(just learning-report:*)",
      "Bash(just learning-dashboard:*)",
      "Bash(./scripts/workflow-automation.sh:*)",
      "Bash(just workflow-dashboard:*)",
      "Bash(just orchestrate:*)",
      "Bash(just:*)",
      "Bash(just check)",
      "Bash(git checkout:*)",
      "Bash(git pull:*)",
      "Bash(OPENAI_MOCK=1 PYTHONPATH=$PWD:$PYTHONPATH pytest -k \"test_draft_post_happy_path\" -s)",
      "Bash(OPENAI_MOCK=1 PYTHONPATH=$PWD:$PYTHONPATH python -c \"\nimport os\nos.environ[''OPENAI_MOCK''] = ''1''\nfrom services.common.openai_wrapper import chat, _usd\nresult = chat(''gpt-4o'', ''test prompt'')\ncost = _usd(''gpt-4o'', 10, 10)\nprint(f''Result: {result}'')\nprint(f''Cost: {cost}'')\nprint(''OPENAI_MOCK mode working correctly!'')\n\")",
      "Bash(OPENAI_MOCK=1 just e2e)",
      "mcp__linear__linear_getProjects",
      "mcp__linear__linear_createProject",
      "mcp__linear__linear_createIssue",
      "mcp__linear__linear_updateIssue",
      "Bash(jq:*)",
      "Bash(cat:*)",
      "Bash(./scripts/command-center.sh generate:*)",
      "Bash(rm:*)",
      "Bash(./debug-cc.sh:*)",
      "Bash(quality_data='{\"\"\"\"quality_score\"\"\"\": 88}')",
      "Bash(echo \"$quality_data\")",
      "Bash(./scripts/command-center-simple.sh generate:*)",
      "Bash(./scripts/cc-working.sh generate:*)",
      "Bash(./scripts/cc-final.sh:*)",
      "Bash(./test-cc.sh:*)",
      "Bash(OPENAI_MOCK=1 PYTHONPATH=$PWD:$PYTHONPATH pytest -s -m e2e tests/e2e/test_enhanced_metrics.py::test_business_metrics_collection -v)",
      "mcp__filesystem__list_directory",
      "mcp__filesystem__directory_tree",
      "Bash(just images)",
      "Bash(just deploy-dev:*)",
      "Bash(OPENAI_MOCK=1 PYTHONPATH=$PWD:$PYTHONPATH pytest -s -m e2e tests/e2e/test_enhanced_metrics.py::test_http_request_metrics -v)",
      "Bash(git add:*)",
      "Bash(git commit:*)"
    ],
    "deny": []
  }
}